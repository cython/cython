PYTHON test.py

######## test.py ########

from __future__ import print_function

import os.path
from Cython.Utils import is_cython_generated_file
from Cython.Compiler.Errors import CompileError
from Cython.Build.Dependencies import cythonize

# Make sure the source files are newer than the .c files, so that cythonize() regenerates them.
files = {}
for source_file in sorted(os.listdir(os.getcwd())):
    if 'module' in source_file and not source_file.endswith(".c"):
        c_file = files[source_file] = os.path.splitext(source_file)[0] + ".c"
        os.utime(source_file, None)
        assert not os.path.exists(c_file) or os.path.getmtime(source_file) >= os.path.getmtime(c_file)

for source_file, c_file in files.items():
    print("Testing:", source_file, c_file)
    assert is_cython_generated_file(c_file, allow_failed=True, if_not_found=True)
    cythonize(source_file, language_level=3)
    assert is_cython_generated_file(c_file, if_not_found=False)
    assert os.path.getmtime(source_file) <= os.path.getmtime(c_file)

# But overwriting an unknown file should fail, even when requested multiple times.
for source_file in [
        "refuse_to_overwrite.pyx",
        "refuse_to_overwrite.pyx",
        "refuse_to_overwrite.pyx",
        #
        "refuse_to_overwrite.py",
        "refuse_to_overwrite.py",
        "refuse_to_overwrite.py",
        #
        "compile_failure.pyx",
        "compile_failure.pyx",
        "compile_failure.pyx",
]:
    os.utime(source_file, None)
    c_file = os.path.splitext(source_file)[0] + ".c"
    assert not is_cython_generated_file(c_file)
    try:
        print("Testing:", source_file)
        cythonize(source_file, language_level=3)
    except CompileError:
        print("REFUSED to overwrite %s, OK" % c_file)
        assert not is_cython_generated_file(c_file)
    else:
        assert False, "FAILURE: Existing output file was overwritten for source file %s" % source_file


######## pymodule.c ########
#error Do not use this file, it is the result of a failed Cython compilation.

######## pymodule.py ########
"""
Overwriting a failed .py file result works
"""

######## cymodule.c ########
#error Do not use this file, it is the result of a failed Cython compilation.

######## cymodule.pyx ########
"""
Overwriting a failed .pyx file result works
"""

######## overwritten_cymodule.c ########
/* Generated by Cython 0.8.15 */

######## overwritten_cymodule.pyx ########
"""
Overwriting an outdated .c file works
"""


######## new_cymodule.pyx ########
"""
Creating a new .c file works
"""

######## new_pymodule.py ########
"""
Creating a new .c file works
"""


######## refuse_to_overwrite.c ########
static int external_function(int x) {
    return x + 1;
}

######## refuse_to_overwrite.py ########
"""
Do not overwrite an unknown output file
"""

######## refuse_to_overwrite.pyx ########
"""
Do not overwrite an unknown output file
"""


######## compile_failure.c ########
static int external_function(int x) {
    return x + 1;
}

######## compile_failure.pyx ########
"""
Do not overwrite an unknown output file even on compile failures.
"""

Not Python syntax!
