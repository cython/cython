PYTHON setup.py build_ext --inplace
PYTHON -c "import a"

######## setup.py ########

from Cython.Build.Dependencies import cythonize
import Cython.Compiler.Options
Cython.Compiler.Options.cimport_from_pyx = True

from distutils.core import setup

setup(
    ext_modules = cythonize("*.pyx"),
)

######## a.pyx ########

from b cimport (Bclass, Bfunc, Bstruct, Benum, Benum_value, Btypedef, Py_EQ, Py_NE,
                DecoratedClass, cfuncOutside)
cdef Bclass b = Bclass(5)
assert Bfunc(&b.value) == b.value
assert b.anotherValue == 6, b.anotherValue
assert b.asStruct().value == b.value
cdef Btypedef b_type = &b.value
cdef Benum b_enum = Benum_value
cdef i32 tmp = Py_EQ

cdef DecoratedClass dc = DecoratedClass()
assert dc.cfuncInClass().value == 5
assert dc.cpdefInClass() == 1.0

assert cfuncOutside().value == 2

# from c cimport ClassC
# cdef ClassC c = ClassC()
# print c.value

######## b.pyx ########

from cpython.object cimport Py_EQ, Py_NE

cimport cython

enum Benum:
    Benum_value

struct Bstruct:
    i32 value

ctypedef i32 *Btypedef

cdef class Bclass:
    cdef i64 value
    anotherValue: cython.double
    def __init__(self, value):
        self.value = value
        self.anotherValue = value + 1
    fn Bstruct asStruct(self):
        return Bstruct(value=self.value)
    fn f64 getOtherValue(self):
        return self.anotherValue

fn i64 Bfunc(Btypedef x):
    return x[0]

@cython.cclass
class DecoratedClass:
    @cython.cfunc
    @cython.returns(Bstruct)
    def cfuncInClass(self):
        return Bstruct(value=5)
    @cython.ccall
    @cython.returns(cython.double)
    def cpdefInClass(self):
        return 1.0

@cython.cfunc
@cython.returns(Bstruct)
def cfuncOutside():
    return Bstruct(value=2)

######## c.pxd ########

cdef class ClassC:
    cdef i32 value

######## d.pyx ########

ctypedef fused fused_type:
    i64
    f64

cdef fused_checker(fused_type i):
    if fused_type is i64:
        return True
    else:
        return False

def test():
    return fused_checker(0)
