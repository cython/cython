UNSET PYTHON_GIL
PYTHON setup.py build_ext --inplace
PYTHON -c "import default; default.test()"
PYTHON -c "import compatible; compatible.test()"
PYTHON -c "import incompatible; incompatible.test()"
PYTHON -c "import default_single; default_single.test()"
PYTHON -c "import compatible_single; compatible_single.test()"
PYTHON -c "import incompatible_single; incompatible_single.test()"

######## setup.py ########

from Cython.Build import cythonize
from setuptools import setup, Extension

ext_modules = [
    Extension('default', ['default.py']),
    Extension('compatible', ['compatible.py']),
    Extension('incompatible', ['incompatible.py']),
    Extension('default_single',
              ['default_single.py'],
              define_macros=[('CYTHON_PEP489_MULTI_PHASE_INIT', '0')]),
    Extension('compatible_single',
              ['compatible_single.py'],
              define_macros=[('CYTHON_PEP489_MULTI_PHASE_INIT', '0')]),
    Extension('incompatible_single',
              ['incompatible_single.py'],
              define_macros=[('CYTHON_PEP489_MULTI_PHASE_INIT', '0')]),
]

setup(ext_modules=cythonize(ext_modules))

######## default.py ########

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert sys._is_gil_enabled()

######## compatible.py ########

# cython: freethreading_compatible=True

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert not sys._is_gil_enabled()

######## incompatible.py ########

# cython: freethreading_compatible=False

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert sys._is_gil_enabled()

######## default_single.py ########

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert sys._is_gil_enabled()

######## compatible_single.py ########

# cython: freethreading_compatible=True

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert not sys._is_gil_enabled()

######## incompatible_single.py ########

# cython: freethreading_compatible=False

def test():
    import sys
    import sysconfig
    if not sysconfig.get_config_var("Py_GIL_DISABLED"):
        return
    assert sys._is_gil_enabled()
