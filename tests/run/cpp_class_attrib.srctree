PYTHON setup.py build_ext --inplace
PYTHON -c "import runner"

######## setup.py ########

from Cython.Build.Dependencies import cythonize
from distutils.core import setup
import os

CYTHON_PROJECT_DIR = os.environ['CYTHON_PROJECT_DIR']
example_dir = os.path.abspath(os.path.join(CYTHON_PROJECT_DIR,
                              'docs/examples/userguide/wrapping_CPlusPlus'))

ext_modules= cythonize("rect.pyx", include_path=[example_dir])
ext_modules[0].include_dirs.append(example_dir)
setup(ext_modules=ext_modules)

######## rect.pyx ########

# distutils: language = c++

cimport Rectangle

cdef class PyRectangle:
    cdef Rectangle.Rectangle c_rect

    def __cinit__(self, int x0, int y0, int x1, int y1):
        self.c_rect = Rectangle.Rectangle(x0, y0, x1, y1)

    def get_area(self):
        return self.c_rect.getArea()

    def get_size(self):
        cdef int width, height
        self.c_rect.getSize(&width, &height)
        return width, height

    def move(self, dx, dy):
        self.c_rect.move(dx, dy)

    # Attribute access
    @property
    def x0(self):
        return self.c_rect.x0
    @x0.setter
    def x0(self, x0):
        self.c_rect.x0 = x0

    # Attribute access
    @property
    def x1(self):
        return self.c_rect.x1
    @x1.setter
    def x1(self, x1):
        self.c_rect.x1 = x1

    # Attribute access
    @property
    def y0(self):
        return self.c_rect.y0
    @y0.setter
    def y0(self, y0):
        self.c_rect.y0 = y0

    # Attribute access
    @property
    def y1(self):
        return self.c_rect.y1
    @y1.setter
    def y1(self, y1):
        self.c_rect.y1 = y1

######## runner.py ########

import rect

x0, y0, x1, y1 = 1, 2, 3, 4
rect_obj = rect.PyRectangle(x0, y0, x1, y1)

assert rect_obj.x0 == x0
