PYTHON setup.py build_ext --inplace
PYTHON -c "import import_enums_test"

######## setup.py ########

from Cython.Build.Dependencies import cythonize

from distutils.core import setup

setup(
  ext_modules = cythonize(["enums.pyx", "enums_same_name.pyx", "no_enums.pyx"]),
)

######## enums.pyx ########

cpdef enum:
    BAR

cpdef foo(): pass

######## enums.pxd ########

cpdef enum:
    FOO

cpdef enum NamedEnumType:
    NamedEnumValue = 389

cpdef foo()

######## enums_same_name.pyx ############

######## enums_same_name.pxd ############

# Note - same name as enums.pxd but shouldn't conflict
cpdef enum NamedEnumType:
    Value = 1

######## enums_without_pyx.pxd #####

cpdef enum EnumTypeNotInPyx:
    AnotherEnumValue = 500

######## no_enums.pyx ########

from enums cimport *
from enums_without_pyx cimport *
cimport enums_same_name

def get_named_enum_value():
    return NamedEnumType.NamedEnumValue

def get_from_enums_same_name():
    # This should not generate conflicting "to py" functions with the other
    # identically named enum from a different pxd file.
    return enums_same_name.NamedEnumType.Value

def get_named_without_pyx():
    # This'll generate a warning but return a c int
    return EnumTypeNotInPyx.AnotherEnumValue

######## import_enums_test.py ########

# We can import enums with a star import.
from enums import *
import enums_same_name

print(dir())
assert 'BAR' in dir() and 'FOO' in dir()
assert 'NamedEnumType' in dir()

# enums not generated in the wrong module
import no_enums
print(dir(no_enums))
assert 'FOO' not in dir(no_enums)
assert 'foo' not in dir(no_enums)

assert no_enums.get_named_enum_value() == NamedEnumType.NamedEnumValue
# In this case the enum isn't accessible from Python (by design)
# but the conversion to Python goes through a reasonable fallback
assert no_enums.get_named_without_pyx() == 500

assert no_enums.get_from_enums_same_name() == enums_same_name.NamedEnumType.Value
