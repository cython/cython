# This file contains tests corresponding to unresolved bugs
# either in PyPy, PyPy's cpyext, or Cython under PyPy,
# which will be skipped in the normal testing run.

bufaccess
memoryview.memoryview$

# looks like a doctest issue? It's failing to match output that looks
# identical to my eye
#run.unicodemethods
# multiphase import not supported
run.unicode_imports

run.tp_new
run.test_fstring
run.test_exceptions
run.test_dictviews
run.str_subclass_kwargs
run.special_method_docstrings
run.slice_ptr
compile.min_async
run.cython_includes
run.test_unicode
run.__getattribute__
run.__getattribute_subclasses__
run.__debug__
run.builtin_abs
run.builtincomplex
run.cdef_multiple_inheritance_errors
run.cdivision_CEP_516
run.cyfunction
run.final_cdef_class
run.index
run.pyclass_special_methods
run.reimport_from_package
run.reimport_from_subinterpreter
run.reimport_failure
pkg.cimportfrom
embedded
TestCyCache
run.ext_auto_richcmp
run.coverage_cmd
run.coverage_cmd_src_layout
run.coverage_installed_pkg
run.coverage_api
run.coverage_nogil

# very little coroutine-related seems to work
# For PyPy3.9+, missing support for _PyErr_StackItem in PyGenObject,
# PyAsyncGenObject and PyCoroObject, which prevents supporting yields
# from an exception handler
run.test_asyncgen
run.test_coroutines_pep492
run.embedsignatures
run.asyncio_generators
run.py35_pep492_interop

# gc issue?
external_ref_reassignment
run.exttype_dealloc
# even if gc.collect is added, order is changed
memoryview.parallel_refcounting_stress_test

# bugs in cpyext: PyNumber_InPlacePower with non-None modulus is not supported
run.special_methods_T561
run.special_methods_T561_py2
