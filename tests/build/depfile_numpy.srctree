# tag: numpy

PYTHON -m Cython.Build.Cythonize -M dep_np.pyx
PYTHON check_np.py

######## dep_np.pyx ########

cimport numpy as np
np.import_array()



######## check_np.py ########

import os
import re

import numpy as np
import Cython

with open("dep_np.c.dep", "r") as f:
    contents = f.read().replace("\n", " ").replace("\\", "")

contents = contents.split()

cy_prefix, _ = os.path.split(Cython.__file__)
contents = [fname.replace(cy_prefix, "cy_prefix") for fname in contents]

np_prefix, _ = os.path.split(np.__file__)
contents = [fname.replace(np_prefix, "np_prefix") for fname in contents]

expected = ['cy_prefix/Includes/cpython/buffer.pxd',
    'cy_prefix/Includes/cpython/mem.pxd',
    'cy_prefix/Includes/cpython/object.pxd',
    'cy_prefix/Includes/cpython/ref.pxd',
    'cy_prefix/Includes/cpython/type.pxd',
    'cy_prefix/Includes/libc/stdio.pxd',
    'cy_prefix/Includes/libc/string.pxd',
    'dep_np.c:',
    'dep_np.pyx',]

# Also account for legacy numpy versions, which do not ship
# `__init__.pxd` hence the fallback is used:
if 'cy_prefix/Includes/numpy/__init__.pxd' in contents:
    expected.append('cy_prefix/Includes/numpy/__init__.pxd')
else:
    expected.append('np_prefix/__init__.pxd')

assert sorted(contents) == sorted(expected), sorted(contents)
