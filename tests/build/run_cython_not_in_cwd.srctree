
PYTHON check_paths_from_cython.py

######## src/foo/__init__.py ########

# foo is a package and foo.bar is the module to build

######## src/foo/bar.pyx ########

def func(x):
    return 2*x

######## build/src/foo/placeholder.txt ########

# Build outputs go in the build directory and cython is run from here.

######## check_paths_from_cython.py ########

import sys
import subprocess

python = sys.executable

def cython(cmdstr, cwd=None):
    argv = [sys.executable, '-m', 'cython'] + cmdstr.split()
    subprocess.run(argv, check=True, cwd=cwd)

def grep(fname, pattern):
    with open(fname) as fin:
        return [line for line in fin if pattern in line]

cython('-3 src/foo/bar.pyx -o build/src/foo/bar1.pyx.c')
cython('-3 ../src/foo/bar.pyx -o src/foo/bar2.pyx.c', cwd='build')

res1 = grep('build/src/foo/bar1.pyx.c', 'bar.pyx')
res2 = grep('build/src/foo/bar2.pyx.c', 'bar.pyx')

assert res1 == [
    # Running cython on a file in CWD uses some paths relative to CWD.
    '  "src/foo/bar.pyx",\n',
    'static const char __pyx_k_src_foo_bar_pyx[] = "src/foo/bar.pyx";\n',
    '/* "foo/bar.pyx":2\n',
    '  /* "foo/bar.pyx":3\n',
    '  /* "foo/bar.pyx":2\n',
    '  /* "foo/bar.pyx":2\n'
], '\n' + ''.join(res1)

assert res2 == [
    # When not in CWD all paths are relative to sys.path.
    '  "foo/bar.pyx",\n',
    'static const char __pyx_k_foo_bar_pyx[] = "foo/bar.pyx";\n',
    '/* "foo/bar.pyx":2\n',
    '  /* "foo/bar.pyx":3\n',
    '  /* "foo/bar.pyx":2\n',
    '  /* "foo/bar.pyx":2\n',
], '\n' + ''.join(res2)
