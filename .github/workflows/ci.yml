name: CI

on:
  push:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  ci:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      # MATRIX:
      # =======
      # Required parameters:
      #  os                  the os to run on
      #  python-version      the python version to use
      #  backend             the backend to use
      #  env                 any additional env variables. Set to '{}' for none
      # Optional parameters:
      #  allowed_failure     whether the job is allowed to fail
      #  extra_hash          extra hash str to differentiate from other caches with similar name (must always start with '-')
      matrix:
        # Tests [amd64]
        #
        # FIXME: 'cpp' tests seems to fail due to compilation errors (numpy_pythran_unit)
        # in all python versions and test failures (builtin_float) in 3.5<
        os: [ubuntu-22.04]
        backend: [c]
        python-version:
          - "3.12"
        env: [{}]

        include:
          #- python-version: "3.14-dev"
          #  allowed_failure: true
          #- python-version: "3.14t-dev"
          #  allowed_failure: true

          - os:  windows-11-arm
            python-version: "3.12"
            backend: "c"
            extra_hash: "arm64"
            env: {}


    # This defaults to 360 minutes (6h) which is way too long and if a test gets stuck, it can block other pipelines.
    # From testing, the runs tend to take ~10-15 minutes for ubuntu / macos and ~25 for windows,
    # so a limit of 80 minutes should be enough. This can always be changed in the future if needed.
    timeout-minutes: 80
    runs-on: ${{ matrix.os }}

    env:
      BACKEND: ${{ matrix.backend }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      MACOSX_DEPLOYMENT_TARGET: "11.0"
      GCC_VERSION: 10
      USE_CCACHE: 1
      CCACHE_SLOPPINESS: "pch_defines,time_macros"
      CCACHE_COMPRESS: 1
      CCACHE_COMPRESSLEVEL: 3
      CCACHE_MAXSIZE: "250M"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1

      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Compilation Cache
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          variant: ${{ startsWith(runner.os, 'windows') && 'sccache' || 'ccache' }}  # fake ternary
          create-symlink: ${{ startsWith(runner.os, 'windows') && 'true' || 'false' }}  # fake ternary
          key: ${{ runner.os }}-hendrikmuhs-ccache${{ matrix.extra_hash }}-${{ matrix.python-version }}-${{ matrix.backend == 'c' || matrix.backend == 'c,cpp' }}-${{ contains(matrix.backend, 'cpp') }}-${{ hashFiles('test-requirements*.txt', '.github/**/ci.yml', 'Tools/**/ci-run.sh') }}
          max-size: ${{ env.CCACHE_MAXSIZE }}

      - name: Run CI
        continue-on-error: ${{ matrix.allowed_failure || false }}
        env: ${{ matrix.env }}
        run: bash ./Tools/ci-run.sh

      - name: Upload HTML docs
        uses: actions/upload-artifact@v4.6.2
        with:
          name: htmldocs
          path: docs/build/html
          if-no-files-found: ignore

      - name: Upload wheels
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheels-${{ runner.os }}-${{ matrix.python-version }}${{ matrix.extra_hash }}
          path: dist/*.whl
          if-no-files-found: ignore


  pycoverage:
    runs-on: ubuntu-22.04

    env:
      BACKEND: c,cpp
      OS_NAME: ubuntu-22.04
      PYTHON_VERSION: "3.11"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.1

      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.11"

      - name: Run Coverage
        env: { COVERAGE: 1, NO_CYTHON_COMPILE: 1 }
        run: bash ./Tools/ci-run.sh

      - name: Write summary
        run: |
          if [ -f coverage-report.md ]; then { echo "## Python coverage results:"; cat coverage-report.md ; } >> $GITHUB_STEP_SUMMARY; fi

      - name: Upload Coverage HTML Report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: pycoverage_html
          path: coverage-report-html

  cycoverage:
    runs-on: ubuntu-22.04
    needs: [ pycoverage ]  # order summary report output

    env:
      BACKEND: c,cpp
      OS_NAME: ubuntu-22.04
      PYTHON_VERSION: "3.11"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1

      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.11"

      - name: Run Coverage
        env: { COVERAGE: 1 }
        run: bash ./Tools/ci-run.sh

      - name: Write summary
        run: |
          if [ -f coverage-report.md ]; then { echo "## Compiled coverage results:"; cat coverage-report.md ; } >> $GITHUB_STEP_SUMMARY; fi

      - name: Upload Coverage HTML Report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: cycoverage_html
          path: coverage-report-html

  benchmarks:
    runs-on: ubuntu-latest

    env:
      CCACHE_SLOPPINESS: "pch_defines,time_macros"
      CCACHE_COMPRESS: 1
      CCACHE_COMPRESSLEVEL: 5
      CCACHE_NOHASHDIR: 1
      CFLAGS: -O3 -g1 -fPIC -mtune=generic

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Compilation Cache
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          create-symlink: true
          variant: ${{ startsWith(runner.os, 'windows') && 'sccache' || 'ccache' }}  # fake ternary
          key: ${{ runner.os }}-hendrikmuhs-ccache-benchmarks
          max-size: 500M

      - name: Setup python
        uses: actions/setup-python@v5.6.0
        with:
          # List special Pythons first to keep the 'normal' one as (last) "python3.xy".
          python-version: |
            3.13t
            3.10
            3.12
            3.13
            3.14-dev

      - name: Run Benchmarks
        run: |
          # Run benchmarks in all Python versions, Limited C-API only in 3.14.
          LIMITED_API=--with-limited
          for PYTHON in  python3.14  python3.13  python3.13t  python3.12  python3.10  ; do
              ${PYTHON} -m pip install setuptools
              if [[ ${PYTHON} == *t || ${PYTHON} == *"t-dev" ]]; then
                COMMITS=("origin/master"  "HEAD")
                CYTHONIZE_ARGS="-Xfreethreading_compatible=True"
              else
                COMMITS=("origin/3.0.x"  "3a7a936e099df468dcaa01829ae6567c577489c0"  "${LIMITED_API}" "origin/master"  "${LIMITED_API}" "HEAD")
                CYTHONIZE_ARGS=
              fi
              ${PYTHON} Demos/benchmarks/run_benchmarks.py  --show-size --report benchmark_results_${PYTHON}.csv --with-python  ${CYTHONIZE_ARGS} ${COMMITS[*]}
              LIMITED_API=
          done | tee benchmarks.log

      - name: Create summary
        run: |
          { echo "## Benchmark results:"; echo; python Demos/benchmarks/report.py benchmark_results_*.csv; } >> $GITHUB_STEP_SUMMARY

      - name: Upload results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: benchmark_results.txt
          path: benchmarks.log

  codespell:
    name: Check for spelling errors
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Codespell
        uses: codespell-project/actions-codespell@v2
