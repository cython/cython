# cython: language_level=3, py2_import=True
#
#   Cython Scanner - Lexical Definitions
#

from __future__ import absolute_import, unicode_literals

raw_prefixes = "rR"
bytes_prefixes = "bB"
string_prefixes = "fFuU" + bytes_prefixes
char_prefixes = "cC"
any_string_prefix = raw_prefixes + string_prefixes + char_prefixes
IDENT = 'IDENT'


def make_lexicon():
    from ..Plex import \
        Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \
        TEXT, IGNORE, Method, State, Lexicon,Range

    letter = Any("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_")
    nonzero_digit = Any("123456789")
    digit = Any("0123456789")
    bindigit = Any("01")
    octdigit = Any("01234567")
    hexdigit = Any("0123456789ABCDEFabcdef")
    indentation = Bol + Rep(Any(" \t"))

    # Some functions at the end of the file show how to generate these strings.
    # They're pretty slow to generate at runtime, and require Python3, so
    # are just included directly here
    unicode_start_character = (
    Any((b'_\xc2\xaa\xc2\xb5\xc2\xba\xcb\xac\xcb\xae\xcd\xbf\xce\x86\xce\x8c\xd5\x99\xdb'+
    b'\x95\xdb\xbf\xdc\x90\xde\xb1\xdf\xba\xe0\xa0\x9a\xe0\xa0\xa4\xe0\xa0\xa8\xe0\xa4'+
    b'\xbd\xe0\xa5\x90\xe0\xa6\xb2\xe0\xa6\xbd\xe0\xa7\x8e\xe0\xa7\xbc\xe0\xa9\x9e\xe0'+
    b'\xaa\xbd\xe0\xab\x90\xe0\xab\xb9\xe0\xac\xbd\xe0\xad\xb1\xe0\xae\x83\xe0\xae\x9c'+
    b'\xe0\xaf\x90\xe0\xb0\xbd\xe0\xb2\x80\xe0\xb2\xbd\xe0\xb3\x9e\xe0\xb4\xbd\xe0\xb5'+
    b'\x8e\xe0\xb6\xbd\xe0\xb8\xb2\xe0\xba\x84\xe0\xba\x8a\xe0\xba\x8d\xe0\xba\xa5\xe0'+
    b'\xba\xa7\xe0\xba\xb2\xe0\xba\xbd\xe0\xbb\x86\xe0\xbc\x80\xe1\x80\xbf\xe1\x81\xa1'+
    b'\xe1\x82\x8e\xe1\x83\x87\xe1\x83\x8d\xe1\x89\x98\xe1\x8b\x80\xe1\x9f\x97\xe1\x9f'+
    b'\x9c\xe1\xa2\xaa\xe1\xaa\xa7\xe1\xbd\x99\xe1\xbd\x9b\xe1\xbd\x9d\xe1\xbe\xbe\xe2'+
    b'\x81\xb1\xe2\x81\xbf\xe2\x84\x82\xe2\x84\x87\xe2\x84\x95\xe2\x84\xa4\xe2\x84\xa6'+
    b'\xe2\x84\xa8\xe2\x85\x8e\xe2\xb4\xa7\xe2\xb4\xad\xe2\xb5\xaf\xea\xa3\xbb\xea\xa7'+
    b'\x8f\xea\xa9\xba\xea\xaa\xb1\xea\xab\x80\xea\xab\x82\xef\xac\x9d\xef\xac\xbe\xef'+
    b'\xb9\xb1\xef\xb9\xb3\xef\xb9\xb7\xef\xb9\xb9\xef\xb9\xbb\xef\xb9\xbd\xf0\x90\xa0'+
    b'\x88\xf0\x90\xa0\xbc\xf0\x90\xa8\x80\xf0\x90\xbc\xa7\xf0\x91\x85\x84\xf0\x91\x85'+
    b'\xb6\xf0\x91\x87\x9a\xf0\x91\x87\x9c\xf0\x91\x8a\x88\xf0\x91\x8c\xbd\xf0\x91\x8d'+
    b'\x90\xf0\x91\x93\x87\xf0\x91\x99\x84\xf0\x91\xa3\xbf\xf0\x91\xa8\x80\xf0\x91\xa8'+
    b'\xba\xf0\x91\xa9\x90\xf0\x91\xaa\x9d\xf0\x91\xb1\x80\xf0\x91\xb5\x86\xf0\x91\xb6'+
    b'\x98\xf0\x96\xbd\x90\xf0\x9d\x92\xa2\xf0\x9d\x92\xbb\xf0\x9d\x95\x86\xf0\x9e\xb8'+
    b'\xa4\xf0\x9e\xb8\xa7\xf0\x9e\xb8\xb9\xf0\x9e\xb8\xbb\xf0\x9e\xb9\x82\xf0\x9e\xb9'+
    b'\x87\xf0\x9e\xb9\x89\xf0\x9e\xb9\x8b\xf0\x9e\xb9\x94\xf0\x9e\xb9\x97\xf0\x9e\xb9'+
    b'\x99\xf0\x9e\xb9\x9b\xf0\x9e\xb9\x9d\xf0\x9e\xb9\x9f\xf0\x9e\xb9\xa4\xf0\x9e\xb9'+
    b'\xbe').decode('utf-8')) |
    Range((b'AZaz\xc3\x80\xc3\x96\xc3\x98\xc3\xb6\xc3\xb8\xcb\x81\xcb\x86\xcb\x91'+
    b'\xcb\xa0\xcb\xa4\xcd\xb0\xcd\xb4\xcd\xb6\xcd\xb7\xcd\xbb\xcd\xbd\xce\x88\xce\x8a'+
    b'\xce\x8e\xce\xa1\xce\xa3\xcf\xb5\xcf\xb7\xd2\x81\xd2\x8a\xd4\xaf\xd4\xb1\xd5\x96'+
    b'\xd5\xa0\xd6\x88\xd7\x90\xd7\xaa\xd7\xaf\xd7\xb2\xd8\xa0\xd9\x8a\xd9\xae\xd9\xaf'+
    b'\xd9\xb1\xdb\x93\xdb\xa5\xdb\xa6\xdb\xae\xdb\xaf\xdb\xba\xdb\xbc\xdc\x92\xdc\xaf'+
    b'\xdd\x8d\xde\xa5\xdf\x8a\xdf\xaa\xdf\xb4\xdf\xb5\xe0\xa0\x80\xe0\xa0\x95\xe0\xa1'+
    b'\x80\xe0\xa1\x98\xe0\xa1\xa0\xe0\xa1\xaa\xe0\xa2\xa0\xe0\xa2\xb4\xe0\xa2\xb6\xe0'+
    b'\xa2\xbd\xe0\xa4\x84\xe0\xa4\xb9\xe0\xa5\x98\xe0\xa5\xa1\xe0\xa5\xb1\xe0\xa6\x80'+
    b'\xe0\xa6\x85\xe0\xa6\x8c\xe0\xa6\x8f\xe0\xa6\x90\xe0\xa6\x93\xe0\xa6\xa8\xe0\xa6'+
    b'\xaa\xe0\xa6\xb0\xe0\xa6\xb6\xe0\xa6\xb9\xe0\xa7\x9c\xe0\xa7\x9d\xe0\xa7\x9f\xe0'+
    b'\xa7\xa1\xe0\xa7\xb0\xe0\xa7\xb1\xe0\xa8\x85\xe0\xa8\x8a\xe0\xa8\x8f\xe0\xa8\x90'+
    b'\xe0\xa8\x93\xe0\xa8\xa8\xe0\xa8\xaa\xe0\xa8\xb0\xe0\xa8\xb2\xe0\xa8\xb3\xe0\xa8'+
    b'\xb5\xe0\xa8\xb6\xe0\xa8\xb8\xe0\xa8\xb9\xe0\xa9\x99\xe0\xa9\x9c\xe0\xa9\xb2\xe0'+
    b'\xa9\xb4\xe0\xaa\x85\xe0\xaa\x8d\xe0\xaa\x8f\xe0\xaa\x91\xe0\xaa\x93\xe0\xaa\xa8'+
    b'\xe0\xaa\xaa\xe0\xaa\xb0\xe0\xaa\xb2\xe0\xaa\xb3\xe0\xaa\xb5\xe0\xaa\xb9\xe0\xab'+
    b'\xa0\xe0\xab\xa1\xe0\xac\x85\xe0\xac\x8c\xe0\xac\x8f\xe0\xac\x90\xe0\xac\x93\xe0'+
    b'\xac\xa8\xe0\xac\xaa\xe0\xac\xb0\xe0\xac\xb2\xe0\xac\xb3\xe0\xac\xb5\xe0\xac\xb9'+
    b'\xe0\xad\x9c\xe0\xad\x9d\xe0\xad\x9f\xe0\xad\xa1\xe0\xae\x85\xe0\xae\x8a\xe0\xae'+
    b'\x8e\xe0\xae\x90\xe0\xae\x92\xe0\xae\x95\xe0\xae\x99\xe0\xae\x9a\xe0\xae\x9e\xe0'+
    b'\xae\x9f\xe0\xae\xa3\xe0\xae\xa4\xe0\xae\xa8\xe0\xae\xaa\xe0\xae\xae\xe0\xae\xb9'+
    b'\xe0\xb0\x85\xe0\xb0\x8c\xe0\xb0\x8e\xe0\xb0\x90\xe0\xb0\x92\xe0\xb0\xa8\xe0\xb0'+
    b'\xaa\xe0\xb0\xb9\xe0\xb1\x98\xe0\xb1\x9a\xe0\xb1\xa0\xe0\xb1\xa1\xe0\xb2\x85\xe0'+
    b'\xb2\x8c\xe0\xb2\x8e\xe0\xb2\x90\xe0\xb2\x92\xe0\xb2\xa8\xe0\xb2\xaa\xe0\xb2\xb3'+
    b'\xe0\xb2\xb5\xe0\xb2\xb9\xe0\xb3\xa0\xe0\xb3\xa1\xe0\xb3\xb1\xe0\xb3\xb2\xe0\xb4'+
    b'\x85\xe0\xb4\x8c\xe0\xb4\x8e\xe0\xb4\x90\xe0\xb4\x92\xe0\xb4\xba\xe0\xb5\x94\xe0'+
    b'\xb5\x96\xe0\xb5\x9f\xe0\xb5\xa1\xe0\xb5\xba\xe0\xb5\xbf\xe0\xb6\x85\xe0\xb6\x96'+
    b'\xe0\xb6\x9a\xe0\xb6\xb1\xe0\xb6\xb3\xe0\xb6\xbb\xe0\xb7\x80\xe0\xb7\x86\xe0\xb8'+
    b'\x81\xe0\xb8\xb0\xe0\xb9\x80\xe0\xb9\x86\xe0\xba\x81\xe0\xba\x82\xe0\xba\x87\xe0'+
    b'\xba\x88\xe0\xba\x94\xe0\xba\x97\xe0\xba\x99\xe0\xba\x9f\xe0\xba\xa1\xe0\xba\xa3'+
    b'\xe0\xba\xaa\xe0\xba\xab\xe0\xba\xad\xe0\xba\xb0\xe0\xbb\x80\xe0\xbb\x84\xe0\xbb'+
    b'\x9c\xe0\xbb\x9f\xe0\xbd\x80\xe0\xbd\x87\xe0\xbd\x89\xe0\xbd\xac\xe0\xbe\x88\xe0'+
    b'\xbe\x8c\xe1\x80\x80\xe1\x80\xaa\xe1\x81\x90\xe1\x81\x95\xe1\x81\x9a\xe1\x81\x9d'+
    b'\xe1\x81\xa5\xe1\x81\xa6\xe1\x81\xae\xe1\x81\xb0\xe1\x81\xb5\xe1\x82\x81\xe1\x82'+
    b'\xa0\xe1\x83\x85\xe1\x83\x90\xe1\x83\xba\xe1\x83\xbc\xe1\x89\x88\xe1\x89\x8a\xe1'+
    b'\x89\x8d\xe1\x89\x90\xe1\x89\x96\xe1\x89\x9a\xe1\x89\x9d\xe1\x89\xa0\xe1\x8a\x88'+
    b'\xe1\x8a\x8a\xe1\x8a\x8d\xe1\x8a\x90\xe1\x8a\xb0\xe1\x8a\xb2\xe1\x8a\xb5\xe1\x8a'+
    b'\xb8\xe1\x8a\xbe\xe1\x8b\x82\xe1\x8b\x85\xe1\x8b\x88\xe1\x8b\x96\xe1\x8b\x98\xe1'+
    b'\x8c\x90\xe1\x8c\x92\xe1\x8c\x95\xe1\x8c\x98\xe1\x8d\x9a\xe1\x8e\x80\xe1\x8e\x8f'+
    b'\xe1\x8e\xa0\xe1\x8f\xb5\xe1\x8f\xb8\xe1\x8f\xbd\xe1\x90\x81\xe1\x99\xac\xe1\x99'+
    b'\xaf\xe1\x99\xbf\xe1\x9a\x81\xe1\x9a\x9a\xe1\x9a\xa0\xe1\x9b\xaa\xe1\x9b\xae\xe1'+
    b'\x9b\xb8\xe1\x9c\x80\xe1\x9c\x8c\xe1\x9c\x8e\xe1\x9c\x91\xe1\x9c\xa0\xe1\x9c\xb1'+
    b'\xe1\x9d\x80\xe1\x9d\x91\xe1\x9d\xa0\xe1\x9d\xac\xe1\x9d\xae\xe1\x9d\xb0\xe1\x9e'+
    b'\x80\xe1\x9e\xb3\xe1\xa0\xa0\xe1\xa1\xb8\xe1\xa2\x80\xe1\xa2\xa8\xe1\xa2\xb0\xe1'+
    b'\xa3\xb5\xe1\xa4\x80\xe1\xa4\x9e\xe1\xa5\x90\xe1\xa5\xad\xe1\xa5\xb0\xe1\xa5\xb4'+
    b'\xe1\xa6\x80\xe1\xa6\xab\xe1\xa6\xb0\xe1\xa7\x89\xe1\xa8\x80\xe1\xa8\x96\xe1\xa8'+
    b'\xa0\xe1\xa9\x94\xe1\xac\x85\xe1\xac\xb3\xe1\xad\x85\xe1\xad\x8b\xe1\xae\x83\xe1'+
    b'\xae\xa0\xe1\xae\xae\xe1\xae\xaf\xe1\xae\xba\xe1\xaf\xa5\xe1\xb0\x80\xe1\xb0\xa3'+
    b'\xe1\xb1\x8d\xe1\xb1\x8f\xe1\xb1\x9a\xe1\xb1\xbd\xe1\xb2\x80\xe1\xb2\x88\xe1\xb2'+
    b'\x90\xe1\xb2\xba\xe1\xb2\xbd\xe1\xb2\xbf\xe1\xb3\xa9\xe1\xb3\xac\xe1\xb3\xae\xe1'+
    b'\xb3\xb1\xe1\xb3\xb5\xe1\xb3\xb6\xe1\xb4\x80\xe1\xb6\xbf\xe1\xb8\x80\xe1\xbc\x95'+
    b'\xe1\xbc\x98\xe1\xbc\x9d\xe1\xbc\xa0\xe1\xbd\x85\xe1\xbd\x88\xe1\xbd\x8d\xe1\xbd'+
    b'\x90\xe1\xbd\x97\xe1\xbd\x9f\xe1\xbd\xbd\xe1\xbe\x80\xe1\xbe\xb4\xe1\xbe\xb6\xe1'+
    b'\xbe\xbc\xe1\xbf\x82\xe1\xbf\x84\xe1\xbf\x86\xe1\xbf\x8c\xe1\xbf\x90\xe1\xbf\x93'+
    b'\xe1\xbf\x96\xe1\xbf\x9b\xe1\xbf\xa0\xe1\xbf\xac\xe1\xbf\xb2\xe1\xbf\xb4\xe1\xbf'+
    b'\xb6\xe1\xbf\xbc\xe2\x82\x90\xe2\x82\x9c\xe2\x84\x8a\xe2\x84\x93\xe2\x84\x98\xe2'+
    b'\x84\x9d\xe2\x84\xaa\xe2\x84\xb9\xe2\x84\xbc\xe2\x84\xbf\xe2\x85\x85\xe2\x85\x89'+
    b'\xe2\x85\xa0\xe2\x86\x88\xe2\xb0\x80\xe2\xb0\xae\xe2\xb0\xb0\xe2\xb1\x9e\xe2\xb1'+
    b'\xa0\xe2\xb3\xa4\xe2\xb3\xab\xe2\xb3\xae\xe2\xb3\xb2\xe2\xb3\xb3\xe2\xb4\x80\xe2'+
    b'\xb4\xa5\xe2\xb4\xb0\xe2\xb5\xa7\xe2\xb6\x80\xe2\xb6\x96\xe2\xb6\xa0\xe2\xb6\xa6'+
    b'\xe2\xb6\xa8\xe2\xb6\xae\xe2\xb6\xb0\xe2\xb6\xb6\xe2\xb6\xb8\xe2\xb6\xbe\xe2\xb7'+
    b'\x80\xe2\xb7\x86\xe2\xb7\x88\xe2\xb7\x8e\xe2\xb7\x90\xe2\xb7\x96\xe2\xb7\x98\xe2'+
    b'\xb7\x9e\xe3\x80\x85\xe3\x80\x87\xe3\x80\xa1\xe3\x80\xa9\xe3\x80\xb1\xe3\x80\xb5'+
    b'\xe3\x80\xb8\xe3\x80\xbc\xe3\x81\x81\xe3\x82\x96\xe3\x82\x9d\xe3\x82\x9f\xe3\x82'+
    b'\xa1\xe3\x83\xba\xe3\x83\xbc\xe3\x83\xbf\xe3\x84\x85\xe3\x84\xaf\xe3\x84\xb1\xe3'+
    b'\x86\x8e\xe3\x86\xa0\xe3\x86\xba\xe3\x87\xb0\xe3\x87\xbf\xe3\x90\x80\xe4\xb6\xb5'+
    b'\xe4\xb8\x80\xe9\xbf\xaf\xea\x80\x80\xea\x92\x8c\xea\x93\x90\xea\x93\xbd\xea\x94'+
    b'\x80\xea\x98\x8c\xea\x98\x90\xea\x98\x9f\xea\x98\xaa\xea\x98\xab\xea\x99\x80\xea'+
    b'\x99\xae\xea\x99\xbf\xea\x9a\x9d\xea\x9a\xa0\xea\x9b\xaf\xea\x9c\x97\xea\x9c\x9f'+
    b'\xea\x9c\xa2\xea\x9e\x88\xea\x9e\x8b\xea\x9e\xb9\xea\x9f\xb7\xea\xa0\x81\xea\xa0'+
    b'\x83\xea\xa0\x85\xea\xa0\x87\xea\xa0\x8a\xea\xa0\x8c\xea\xa0\xa2\xea\xa1\x80\xea'+
    b'\xa1\xb3\xea\xa2\x82\xea\xa2\xb3\xea\xa3\xb2\xea\xa3\xb7\xea\xa3\xbd\xea\xa3\xbe'+
    b'\xea\xa4\x8a\xea\xa4\xa5\xea\xa4\xb0\xea\xa5\x86\xea\xa5\xa0\xea\xa5\xbc\xea\xa6'+
    b'\x84\xea\xa6\xb2\xea\xa7\xa0\xea\xa7\xa4\xea\xa7\xa6\xea\xa7\xaf\xea\xa7\xba\xea'+
    b'\xa7\xbe\xea\xa8\x80\xea\xa8\xa8\xea\xa9\x80\xea\xa9\x82\xea\xa9\x84\xea\xa9\x8b'+
    b'\xea\xa9\xa0\xea\xa9\xb6\xea\xa9\xbe\xea\xaa\xaf\xea\xaa\xb5\xea\xaa\xb6\xea\xaa'+
    b'\xb9\xea\xaa\xbd\xea\xab\x9b\xea\xab\x9d\xea\xab\xa0\xea\xab\xaa\xea\xab\xb2\xea'+
    b'\xab\xb4\xea\xac\x81\xea\xac\x86\xea\xac\x89\xea\xac\x8e\xea\xac\x91\xea\xac\x96'+
    b'\xea\xac\xa0\xea\xac\xa6\xea\xac\xa8\xea\xac\xae\xea\xac\xb0\xea\xad\x9a\xea\xad'+
    b'\x9c\xea\xad\xa5\xea\xad\xb0\xea\xaf\xa2\xea\xb0\x80\xed\x9e\xa3\xed\x9e\xb0\xed'+
    b'\x9f\x86\xed\x9f\x8b\xed\x9f\xbb\xef\xa4\x80\xef\xa9\xad\xef\xa9\xb0\xef\xab\x99'+
    b'\xef\xac\x80\xef\xac\x86\xef\xac\x93\xef\xac\x97\xef\xac\x9f\xef\xac\xa8\xef\xac'+
    b'\xaa\xef\xac\xb6\xef\xac\xb8\xef\xac\xbc\xef\xad\x80\xef\xad\x81\xef\xad\x83\xef'+
    b'\xad\x84\xef\xad\x86\xef\xae\xb1\xef\xaf\x93\xef\xb1\x9d\xef\xb1\xa4\xef\xb4\xbd'+
    b'\xef\xb5\x90\xef\xb6\x8f\xef\xb6\x92\xef\xb7\x87\xef\xb7\xb0\xef\xb7\xb9\xef\xb9'+
    b'\xbf\xef\xbb\xbc\xef\xbc\xa1\xef\xbc\xba\xef\xbd\x81\xef\xbd\x9a\xef\xbd\xa6\xef'+
    b'\xbe\x9d\xef\xbe\xa0\xef\xbe\xbe\xef\xbf\x82\xef\xbf\x87\xef\xbf\x8a\xef\xbf\x8f'+
    b'\xef\xbf\x92\xef\xbf\x97\xef\xbf\x9a\xef\xbf\x9c\xf0\x90\x80\x80\xf0\x90\x80\x8b'+
    b'\xf0\x90\x80\x8d\xf0\x90\x80\xa6\xf0\x90\x80\xa8\xf0\x90\x80\xba\xf0\x90\x80\xbc'+
    b'\xf0\x90\x80\xbd\xf0\x90\x80\xbf\xf0\x90\x81\x8d\xf0\x90\x81\x90\xf0\x90\x81\x9d'+
    b'\xf0\x90\x82\x80\xf0\x90\x83\xba\xf0\x90\x85\x80\xf0\x90\x85\xb4\xf0\x90\x8a\x80'+
    b'\xf0\x90\x8a\x9c\xf0\x90\x8a\xa0\xf0\x90\x8b\x90\xf0\x90\x8c\x80\xf0\x90\x8c\x9f'+
    b'\xf0\x90\x8c\xad\xf0\x90\x8d\x8a\xf0\x90\x8d\x90\xf0\x90\x8d\xb5\xf0\x90\x8e\x80'+
    b'\xf0\x90\x8e\x9d\xf0\x90\x8e\xa0\xf0\x90\x8f\x83\xf0\x90\x8f\x88\xf0\x90\x8f\x8f'+
    b'\xf0\x90\x8f\x91\xf0\x90\x8f\x95\xf0\x90\x90\x80\xf0\x90\x92\x9d\xf0\x90\x92\xb0'+
    b'\xf0\x90\x93\x93\xf0\x90\x93\x98\xf0\x90\x93\xbb\xf0\x90\x94\x80\xf0\x90\x94\xa7'+
    b'\xf0\x90\x94\xb0\xf0\x90\x95\xa3\xf0\x90\x98\x80\xf0\x90\x9c\xb6\xf0\x90\x9d\x80'+
    b'\xf0\x90\x9d\x95\xf0\x90\x9d\xa0\xf0\x90\x9d\xa7\xf0\x90\xa0\x80\xf0\x90\xa0\x85'+
    b'\xf0\x90\xa0\x8a\xf0\x90\xa0\xb5\xf0\x90\xa0\xb7\xf0\x90\xa0\xb8\xf0\x90\xa0\xbf'+
    b'\xf0\x90\xa1\x95\xf0\x90\xa1\xa0\xf0\x90\xa1\xb6\xf0\x90\xa2\x80\xf0\x90\xa2\x9e'+
    b'\xf0\x90\xa3\xa0\xf0\x90\xa3\xb2\xf0\x90\xa3\xb4\xf0\x90\xa3\xb5\xf0\x90\xa4\x80'+
    b'\xf0\x90\xa4\x95\xf0\x90\xa4\xa0\xf0\x90\xa4\xb9\xf0\x90\xa6\x80\xf0\x90\xa6\xb7'+
    b'\xf0\x90\xa6\xbe\xf0\x90\xa6\xbf\xf0\x90\xa8\x90\xf0\x90\xa8\x93\xf0\x90\xa8\x95'+
    b'\xf0\x90\xa8\x97\xf0\x90\xa8\x99\xf0\x90\xa8\xb5\xf0\x90\xa9\xa0\xf0\x90\xa9\xbc'+
    b'\xf0\x90\xaa\x80\xf0\x90\xaa\x9c\xf0\x90\xab\x80\xf0\x90\xab\x87\xf0\x90\xab\x89'+
    b'\xf0\x90\xab\xa4\xf0\x90\xac\x80\xf0\x90\xac\xb5\xf0\x90\xad\x80\xf0\x90\xad\x95'+
    b'\xf0\x90\xad\xa0\xf0\x90\xad\xb2\xf0\x90\xae\x80\xf0\x90\xae\x91\xf0\x90\xb0\x80'+
    b'\xf0\x90\xb1\x88\xf0\x90\xb2\x80\xf0\x90\xb2\xb2\xf0\x90\xb3\x80\xf0\x90\xb3\xb2'+
    b'\xf0\x90\xb4\x80\xf0\x90\xb4\xa3\xf0\x90\xbc\x80\xf0\x90\xbc\x9c\xf0\x90\xbc\xb0'+
    b'\xf0\x90\xbd\x85\xf0\x91\x80\x83\xf0\x91\x80\xb7\xf0\x91\x82\x83\xf0\x91\x82\xaf'+
    b'\xf0\x91\x83\x90\xf0\x91\x83\xa8\xf0\x91\x84\x83\xf0\x91\x84\xa6\xf0\x91\x85\x90'+
    b'\xf0\x91\x85\xb2\xf0\x91\x86\x83\xf0\x91\x86\xb2\xf0\x91\x87\x81\xf0\x91\x87\x84'+
    b'\xf0\x91\x88\x80\xf0\x91\x88\x91\xf0\x91\x88\x93\xf0\x91\x88\xab\xf0\x91\x8a\x80'+
    b'\xf0\x91\x8a\x86\xf0\x91\x8a\x8a\xf0\x91\x8a\x8d\xf0\x91\x8a\x8f\xf0\x91\x8a\x9d'+
    b'\xf0\x91\x8a\x9f\xf0\x91\x8a\xa8\xf0\x91\x8a\xb0\xf0\x91\x8b\x9e\xf0\x91\x8c\x85'+
    b'\xf0\x91\x8c\x8c\xf0\x91\x8c\x8f\xf0\x91\x8c\x90\xf0\x91\x8c\x93\xf0\x91\x8c\xa8'+
    b'\xf0\x91\x8c\xaa\xf0\x91\x8c\xb0\xf0\x91\x8c\xb2\xf0\x91\x8c\xb3\xf0\x91\x8c\xb5'+
    b'\xf0\x91\x8c\xb9\xf0\x91\x8d\x9d\xf0\x91\x8d\xa1\xf0\x91\x90\x80\xf0\x91\x90\xb4'+
    b'\xf0\x91\x91\x87\xf0\x91\x91\x8a\xf0\x91\x92\x80\xf0\x91\x92\xaf\xf0\x91\x93\x84'+
    b'\xf0\x91\x93\x85\xf0\x91\x96\x80\xf0\x91\x96\xae\xf0\x91\x97\x98\xf0\x91\x97\x9b'+
    b'\xf0\x91\x98\x80\xf0\x91\x98\xaf\xf0\x91\x9a\x80\xf0\x91\x9a\xaa\xf0\x91\x9c\x80'+
    b'\xf0\x91\x9c\x9a\xf0\x91\xa0\x80\xf0\x91\xa0\xab\xf0\x91\xa2\xa0\xf0\x91\xa3\x9f'+
    b'\xf0\x91\xa8\x8b\xf0\x91\xa8\xb2\xf0\x91\xa9\x9c\xf0\x91\xaa\x83\xf0\x91\xaa\x86'+
    b'\xf0\x91\xaa\x89\xf0\x91\xab\x80\xf0\x91\xab\xb8\xf0\x91\xb0\x80\xf0\x91\xb0\x88'+
    b'\xf0\x91\xb0\x8a\xf0\x91\xb0\xae\xf0\x91\xb1\xb2\xf0\x91\xb2\x8f\xf0\x91\xb4\x80'+
    b'\xf0\x91\xb4\x86\xf0\x91\xb4\x88\xf0\x91\xb4\x89\xf0\x91\xb4\x8b\xf0\x91\xb4\xb0'+
    b'\xf0\x91\xb5\xa0\xf0\x91\xb5\xa5\xf0\x91\xb5\xa7\xf0\x91\xb5\xa8\xf0\x91\xb5\xaa'+
    b'\xf0\x91\xb6\x89\xf0\x91\xbb\xa0\xf0\x91\xbb\xb2\xf0\x92\x80\x80\xf0\x92\x8e\x99'+
    b'\xf0\x92\x90\x80\xf0\x92\x91\xae\xf0\x92\x92\x80\xf0\x92\x95\x83\xf0\x93\x80\x80'+
    b'\xf0\x93\x90\xae\xf0\x94\x90\x80\xf0\x94\x99\x86\xf0\x96\xa0\x80\xf0\x96\xa8\xb8'+
    b'\xf0\x96\xa9\x80\xf0\x96\xa9\x9e\xf0\x96\xab\x90\xf0\x96\xab\xad\xf0\x96\xac\x80'+
    b'\xf0\x96\xac\xaf\xf0\x96\xad\x80\xf0\x96\xad\x83\xf0\x96\xad\xa3\xf0\x96\xad\xb7'+
    b'\xf0\x96\xad\xbd\xf0\x96\xae\x8f\xf0\x96\xb9\x80\xf0\x96\xb9\xbf\xf0\x96\xbc\x80'+
    b'\xf0\x96\xbd\x84\xf0\x96\xbe\x93\xf0\x96\xbe\x9f\xf0\x96\xbf\xa0\xf0\x96\xbf\xa1'+
    b'\xf0\x97\x80\x80\xf0\x98\x9f\xb1\xf0\x98\xa0\x80\xf0\x98\xab\xb2\xf0\x9b\x80\x80'+
    b'\xf0\x9b\x84\x9e\xf0\x9b\x85\xb0\xf0\x9b\x8b\xbb\xf0\x9b\xb0\x80\xf0\x9b\xb1\xaa'+
    b'\xf0\x9b\xb1\xb0\xf0\x9b\xb1\xbc\xf0\x9b\xb2\x80\xf0\x9b\xb2\x88\xf0\x9b\xb2\x90'+
    b'\xf0\x9b\xb2\x99\xf0\x9d\x90\x80\xf0\x9d\x91\x94\xf0\x9d\x91\x96\xf0\x9d\x92\x9c'+
    b'\xf0\x9d\x92\x9e\xf0\x9d\x92\x9f\xf0\x9d\x92\xa5\xf0\x9d\x92\xa6\xf0\x9d\x92\xa9'+
    b'\xf0\x9d\x92\xac\xf0\x9d\x92\xae\xf0\x9d\x92\xb9\xf0\x9d\x92\xbd\xf0\x9d\x93\x83'+
    b'\xf0\x9d\x93\x85\xf0\x9d\x94\x85\xf0\x9d\x94\x87\xf0\x9d\x94\x8a\xf0\x9d\x94\x8d'+
    b'\xf0\x9d\x94\x94\xf0\x9d\x94\x96\xf0\x9d\x94\x9c\xf0\x9d\x94\x9e\xf0\x9d\x94\xb9'+
    b'\xf0\x9d\x94\xbb\xf0\x9d\x94\xbe\xf0\x9d\x95\x80\xf0\x9d\x95\x84\xf0\x9d\x95\x8a'+
    b'\xf0\x9d\x95\x90\xf0\x9d\x95\x92\xf0\x9d\x9a\xa5\xf0\x9d\x9a\xa8\xf0\x9d\x9b\x80'+
    b'\xf0\x9d\x9b\x82\xf0\x9d\x9b\x9a\xf0\x9d\x9b\x9c\xf0\x9d\x9b\xba\xf0\x9d\x9b\xbc'+
    b'\xf0\x9d\x9c\x94\xf0\x9d\x9c\x96\xf0\x9d\x9c\xb4\xf0\x9d\x9c\xb6\xf0\x9d\x9d\x8e'+
    b'\xf0\x9d\x9d\x90\xf0\x9d\x9d\xae\xf0\x9d\x9d\xb0\xf0\x9d\x9e\x88\xf0\x9d\x9e\x8a'+
    b'\xf0\x9d\x9e\xa8\xf0\x9d\x9e\xaa\xf0\x9d\x9f\x82\xf0\x9d\x9f\x84\xf0\x9d\x9f\x8b'+
    b'\xf0\x9e\xa0\x80\xf0\x9e\xa3\x84\xf0\x9e\xa4\x80\xf0\x9e\xa5\x83\xf0\x9e\xb8\x80'+
    b'\xf0\x9e\xb8\x83\xf0\x9e\xb8\x85\xf0\x9e\xb8\x9f\xf0\x9e\xb8\xa1\xf0\x9e\xb8\xa2'+
    b'\xf0\x9e\xb8\xa9\xf0\x9e\xb8\xb2\xf0\x9e\xb8\xb4\xf0\x9e\xb8\xb7\xf0\x9e\xb9\x8d'+
    b'\xf0\x9e\xb9\x8f\xf0\x9e\xb9\x91\xf0\x9e\xb9\x92\xf0\x9e\xb9\xa1\xf0\x9e\xb9\xa2'+
    b'\xf0\x9e\xb9\xa7\xf0\x9e\xb9\xaa\xf0\x9e\xb9\xac\xf0\x9e\xb9\xb2\xf0\x9e\xb9\xb4'+
    b'\xf0\x9e\xb9\xb7\xf0\x9e\xb9\xb9\xf0\x9e\xb9\xbc\xf0\x9e\xba\x80\xf0\x9e\xba\x89'+
    b'\xf0\x9e\xba\x8b\xf0\x9e\xba\x9b\xf0\x9e\xba\xa1\xf0\x9e\xba\xa3\xf0\x9e\xba\xa5'+
    b'\xf0\x9e\xba\xa9\xf0\x9e\xba\xab\xf0\x9e\xba\xbb\xf0\xa0\x80\x80\xf0\xaa\x9b\x96'+
    b'\xf0\xaa\x9c\x80\xf0\xab\x9c\xb4\xf0\xab\x9d\x80\xf0\xab\xa0\x9d\xf0\xab\xa0\xa0'+
    b'\xf0\xac\xba\xa1\xf0\xac\xba\xb0\xf0\xae\xaf\xa0').decode('utf-8')))
    unicode_continuation_character = (
    Any((b'_\xc2\xaa\xc2\xb5\xc2\xb7\xc2\xba\xcb\xac\xcb\xae\xcd\xbf\xce\x8c\xd5\x99\xd6'+
    b'\xbf\xd7\x87\xdb\xbf\xdf\xba\xdf\xbd\xe0\xa6\xb2\xe0\xa7\x97\xe0\xa7\xbc\xe0\xa7'+
    b'\xbe\xe0\xa8\xbc\xe0\xa9\x91\xe0\xa9\x9e\xe0\xab\x90\xe0\xad\xb1\xe0\xae\x9c\xe0'+
    b'\xaf\x90\xe0\xaf\x97\xe0\xb3\x9e\xe0\xb6\xbd\xe0\xb7\x8a\xe0\xb7\x96\xe0\xba\x84'+
    b'\xe0\xba\x8a\xe0\xba\x8d\xe0\xba\xa5\xe0\xba\xa7\xe0\xbb\x86\xe0\xbc\x80\xe0\xbc'+
    b'\xb5\xe0\xbc\xb7\xe0\xbc\xb9\xe0\xbf\x86\xe1\x83\x87\xe1\x83\x8d\xe1\x89\x98\xe1'+
    b'\x8b\x80\xe1\x9f\x97\xe1\xaa\xa7\xe1\xbd\x99\xe1\xbd\x9b\xe1\xbd\x9d\xe1\xbe\xbe'+
    b'\xe2\x81\x94\xe2\x81\xb1\xe2\x81\xbf\xe2\x83\xa1\xe2\x84\x82\xe2\x84\x87\xe2\x84'+
    b'\x95\xe2\x84\xa4\xe2\x84\xa6\xe2\x84\xa8\xe2\x85\x8e\xe2\xb4\xa7\xe2\xb4\xad\xe2'+
    b'\xb5\xaf\xea\xa3\xbb\xef\xac\xbe\xef\xb9\xb1\xef\xb9\xb3\xef\xb9\xb7\xef\xb9\xb9'+
    b'\xef\xb9\xbb\xef\xb9\xbd\xef\xbc\xbf\xf0\x90\x87\xbd\xf0\x90\x8b\xa0\xf0\x90\xa0'+
    b'\x88\xf0\x90\xa0\xbc\xf0\x90\xa8\xbf\xf0\x90\xbc\xa7\xf0\x91\x85\xb6\xf0\x91\x87'+
    b'\x9c\xf0\x91\x88\xbe\xf0\x91\x8a\x88\xf0\x91\x8d\x90\xf0\x91\x8d\x97\xf0\x91\x91'+
    b'\x9e\xf0\x91\x93\x87\xf0\x91\x99\x84\xf0\x91\xa3\xbf\xf0\x91\xa9\x87\xf0\x91\xaa'+
    b'\x9d\xf0\x91\xb4\xba\xf0\x9d\x92\xa2\xf0\x9d\x92\xbb\xf0\x9d\x95\x86\xf0\x9d\xa9'+
    b'\xb5\xf0\x9d\xaa\x84\xf0\x9e\xb8\xa4\xf0\x9e\xb8\xa7\xf0\x9e\xb8\xb9\xf0\x9e\xb8'+
    b'\xbb\xf0\x9e\xb9\x82\xf0\x9e\xb9\x87\xf0\x9e\xb9\x89\xf0\x9e\xb9\x8b\xf0\x9e\xb9'+
    b'\x94\xf0\x9e\xb9\x97\xf0\x9e\xb9\x99\xf0\x9e\xb9\x9b\xf0\x9e\xb9\x9d\xf0\x9e\xb9'+
    b'\x9f\xf0\x9e\xb9\xa4\xf0\x9e\xb9\xbe').decode('utf-8')) | Range((b'09AZaz\xc3\x80\xc3\x96\xc3\x98\xc3\xb6\xc3\xb8\xcb\x81\xcb\x86'+
    b'\xcb\x91\xcb\xa0\xcb\xa4\xcc\x80\xcd\xb4\xcd\xb6\xcd\xb7\xcd\xbb\xcd\xbd\xce\x86'+
    b'\xce\x8a\xce\x8e\xce\xa1\xce\xa3\xcf\xb5\xcf\xb7\xd2\x81\xd2\x83\xd2\x87\xd2\x8a'+
    b'\xd4\xaf\xd4\xb1\xd5\x96\xd5\xa0\xd6\x88\xd6\x91\xd6\xbd\xd7\x81\xd7\x82\xd7\x84'+
    b'\xd7\x85\xd7\x90\xd7\xaa\xd7\xaf\xd7\xb2\xd8\x90\xd8\x9a\xd8\xa0\xd9\xa9\xd9\xae'+
    b'\xdb\x93\xdb\x95\xdb\x9c\xdb\x9f\xdb\xa8\xdb\xaa\xdb\xbc\xdc\x90\xdd\x8a\xdd\x8d'+
    b'\xde\xb1\xdf\x80\xdf\xb5\xe0\xa0\x80\xe0\xa0\xad\xe0\xa1\x80\xe0\xa1\x9b\xe0\xa1'+
    b'\xa0\xe0\xa1\xaa\xe0\xa2\xa0\xe0\xa2\xb4\xe0\xa2\xb6\xe0\xa2\xbd\xe0\xa3\x93\xe0'+
    b'\xa3\xa1\xe0\xa3\xa3\xe0\xa5\xa3\xe0\xa5\xa6\xe0\xa5\xaf\xe0\xa5\xb1\xe0\xa6\x83'+
    b'\xe0\xa6\x85\xe0\xa6\x8c\xe0\xa6\x8f\xe0\xa6\x90\xe0\xa6\x93\xe0\xa6\xa8\xe0\xa6'+
    b'\xaa\xe0\xa6\xb0\xe0\xa6\xb6\xe0\xa6\xb9\xe0\xa6\xbc\xe0\xa7\x84\xe0\xa7\x87\xe0'+
    b'\xa7\x88\xe0\xa7\x8b\xe0\xa7\x8e\xe0\xa7\x9c\xe0\xa7\x9d\xe0\xa7\x9f\xe0\xa7\xa3'+
    b'\xe0\xa7\xa6\xe0\xa7\xb1\xe0\xa8\x81\xe0\xa8\x83\xe0\xa8\x85\xe0\xa8\x8a\xe0\xa8'+
    b'\x8f\xe0\xa8\x90\xe0\xa8\x93\xe0\xa8\xa8\xe0\xa8\xaa\xe0\xa8\xb0\xe0\xa8\xb2\xe0'+
    b'\xa8\xb3\xe0\xa8\xb5\xe0\xa8\xb6\xe0\xa8\xb8\xe0\xa8\xb9\xe0\xa8\xbe\xe0\xa9\x82'+
    b'\xe0\xa9\x87\xe0\xa9\x88\xe0\xa9\x8b\xe0\xa9\x8d\xe0\xa9\x99\xe0\xa9\x9c\xe0\xa9'+
    b'\xa6\xe0\xa9\xb5\xe0\xaa\x81\xe0\xaa\x83\xe0\xaa\x85\xe0\xaa\x8d\xe0\xaa\x8f\xe0'+
    b'\xaa\x91\xe0\xaa\x93\xe0\xaa\xa8\xe0\xaa\xaa\xe0\xaa\xb0\xe0\xaa\xb2\xe0\xaa\xb3'+
    b'\xe0\xaa\xb5\xe0\xaa\xb9\xe0\xaa\xbc\xe0\xab\x85\xe0\xab\x87\xe0\xab\x89\xe0\xab'+
    b'\x8b\xe0\xab\x8d\xe0\xab\xa0\xe0\xab\xa3\xe0\xab\xa6\xe0\xab\xaf\xe0\xab\xb9\xe0'+
    b'\xab\xbf\xe0\xac\x81\xe0\xac\x83\xe0\xac\x85\xe0\xac\x8c\xe0\xac\x8f\xe0\xac\x90'+
    b'\xe0\xac\x93\xe0\xac\xa8\xe0\xac\xaa\xe0\xac\xb0\xe0\xac\xb2\xe0\xac\xb3\xe0\xac'+
    b'\xb5\xe0\xac\xb9\xe0\xac\xbc\xe0\xad\x84\xe0\xad\x87\xe0\xad\x88\xe0\xad\x8b\xe0'+
    b'\xad\x8d\xe0\xad\x96\xe0\xad\x97\xe0\xad\x9c\xe0\xad\x9d\xe0\xad\x9f\xe0\xad\xa3'+
    b'\xe0\xad\xa6\xe0\xad\xaf\xe0\xae\x82\xe0\xae\x83\xe0\xae\x85\xe0\xae\x8a\xe0\xae'+
    b'\x8e\xe0\xae\x90\xe0\xae\x92\xe0\xae\x95\xe0\xae\x99\xe0\xae\x9a\xe0\xae\x9e\xe0'+
    b'\xae\x9f\xe0\xae\xa3\xe0\xae\xa4\xe0\xae\xa8\xe0\xae\xaa\xe0\xae\xae\xe0\xae\xb9'+
    b'\xe0\xae\xbe\xe0\xaf\x82\xe0\xaf\x86\xe0\xaf\x88\xe0\xaf\x8a\xe0\xaf\x8d\xe0\xaf'+
    b'\xa6\xe0\xaf\xaf\xe0\xb0\x80\xe0\xb0\x8c\xe0\xb0\x8e\xe0\xb0\x90\xe0\xb0\x92\xe0'+
    b'\xb0\xa8\xe0\xb0\xaa\xe0\xb0\xb9\xe0\xb0\xbd\xe0\xb1\x84\xe0\xb1\x86\xe0\xb1\x88'+
    b'\xe0\xb1\x8a\xe0\xb1\x8d\xe0\xb1\x95\xe0\xb1\x96\xe0\xb1\x98\xe0\xb1\x9a\xe0\xb1'+
    b'\xa0\xe0\xb1\xa3\xe0\xb1\xa6\xe0\xb1\xaf\xe0\xb2\x80\xe0\xb2\x83\xe0\xb2\x85\xe0'+
    b'\xb2\x8c\xe0\xb2\x8e\xe0\xb2\x90\xe0\xb2\x92\xe0\xb2\xa8\xe0\xb2\xaa\xe0\xb2\xb3'+
    b'\xe0\xb2\xb5\xe0\xb2\xb9\xe0\xb2\xbc\xe0\xb3\x84\xe0\xb3\x86\xe0\xb3\x88\xe0\xb3'+
    b'\x8a\xe0\xb3\x8d\xe0\xb3\x95\xe0\xb3\x96\xe0\xb3\xa0\xe0\xb3\xa3\xe0\xb3\xa6\xe0'+
    b'\xb3\xaf\xe0\xb3\xb1\xe0\xb3\xb2\xe0\xb4\x80\xe0\xb4\x83\xe0\xb4\x85\xe0\xb4\x8c'+
    b'\xe0\xb4\x8e\xe0\xb4\x90\xe0\xb4\x92\xe0\xb5\x84\xe0\xb5\x86\xe0\xb5\x88\xe0\xb5'+
    b'\x8a\xe0\xb5\x8e\xe0\xb5\x94\xe0\xb5\x97\xe0\xb5\x9f\xe0\xb5\xa3\xe0\xb5\xa6\xe0'+
    b'\xb5\xaf\xe0\xb5\xba\xe0\xb5\xbf\xe0\xb6\x82\xe0\xb6\x83\xe0\xb6\x85\xe0\xb6\x96'+
    b'\xe0\xb6\x9a\xe0\xb6\xb1\xe0\xb6\xb3\xe0\xb6\xbb\xe0\xb7\x80\xe0\xb7\x86\xe0\xb7'+
    b'\x8f\xe0\xb7\x94\xe0\xb7\x98\xe0\xb7\x9f\xe0\xb7\xa6\xe0\xb7\xaf\xe0\xb7\xb2\xe0'+
    b'\xb7\xb3\xe0\xb8\x81\xe0\xb8\xba\xe0\xb9\x80\xe0\xb9\x8e\xe0\xb9\x90\xe0\xb9\x99'+
    b'\xe0\xba\x81\xe0\xba\x82\xe0\xba\x87\xe0\xba\x88\xe0\xba\x94\xe0\xba\x97\xe0\xba'+
    b'\x99\xe0\xba\x9f\xe0\xba\xa1\xe0\xba\xa3\xe0\xba\xaa\xe0\xba\xab\xe0\xba\xad\xe0'+
    b'\xba\xb9\xe0\xba\xbb\xe0\xba\xbd\xe0\xbb\x80\xe0\xbb\x84\xe0\xbb\x88\xe0\xbb\x8d'+
    b'\xe0\xbb\x90\xe0\xbb\x99\xe0\xbb\x9c\xe0\xbb\x9f\xe0\xbc\x98\xe0\xbc\x99\xe0\xbc'+
    b'\xa0\xe0\xbc\xa9\xe0\xbc\xbe\xe0\xbd\x87\xe0\xbd\x89\xe0\xbd\xac\xe0\xbd\xb1\xe0'+
    b'\xbe\x84\xe0\xbe\x86\xe0\xbe\x97\xe0\xbe\x99\xe0\xbe\xbc\xe1\x80\x80\xe1\x81\x89'+
    b'\xe1\x81\x90\xe1\x82\x9d\xe1\x82\xa0\xe1\x83\x85\xe1\x83\x90\xe1\x83\xba\xe1\x83'+
    b'\xbc\xe1\x89\x88\xe1\x89\x8a\xe1\x89\x8d\xe1\x89\x90\xe1\x89\x96\xe1\x89\x9a\xe1'+
    b'\x89\x9d\xe1\x89\xa0\xe1\x8a\x88\xe1\x8a\x8a\xe1\x8a\x8d\xe1\x8a\x90\xe1\x8a\xb0'+
    b'\xe1\x8a\xb2\xe1\x8a\xb5\xe1\x8a\xb8\xe1\x8a\xbe\xe1\x8b\x82\xe1\x8b\x85\xe1\x8b'+
    b'\x88\xe1\x8b\x96\xe1\x8b\x98\xe1\x8c\x90\xe1\x8c\x92\xe1\x8c\x95\xe1\x8c\x98\xe1'+
    b'\x8d\x9a\xe1\x8d\x9d\xe1\x8d\x9f\xe1\x8d\xa9\xe1\x8d\xb1\xe1\x8e\x80\xe1\x8e\x8f'+
    b'\xe1\x8e\xa0\xe1\x8f\xb5\xe1\x8f\xb8\xe1\x8f\xbd\xe1\x90\x81\xe1\x99\xac\xe1\x99'+
    b'\xaf\xe1\x99\xbf\xe1\x9a\x81\xe1\x9a\x9a\xe1\x9a\xa0\xe1\x9b\xaa\xe1\x9b\xae\xe1'+
    b'\x9b\xb8\xe1\x9c\x80\xe1\x9c\x8c\xe1\x9c\x8e\xe1\x9c\x94\xe1\x9c\xa0\xe1\x9c\xb4'+
    b'\xe1\x9d\x80\xe1\x9d\x93\xe1\x9d\xa0\xe1\x9d\xac\xe1\x9d\xae\xe1\x9d\xb0\xe1\x9d'+
    b'\xb2\xe1\x9d\xb3\xe1\x9e\x80\xe1\x9f\x93\xe1\x9f\x9c\xe1\x9f\x9d\xe1\x9f\xa0\xe1'+
    b'\x9f\xa9\xe1\xa0\x8b\xe1\xa0\x8d\xe1\xa0\x90\xe1\xa0\x99\xe1\xa0\xa0\xe1\xa1\xb8'+
    b'\xe1\xa2\x80\xe1\xa2\xaa\xe1\xa2\xb0\xe1\xa3\xb5\xe1\xa4\x80\xe1\xa4\x9e\xe1\xa4'+
    b'\xa0\xe1\xa4\xab\xe1\xa4\xb0\xe1\xa4\xbb\xe1\xa5\x86\xe1\xa5\xad\xe1\xa5\xb0\xe1'+
    b'\xa5\xb4\xe1\xa6\x80\xe1\xa6\xab\xe1\xa6\xb0\xe1\xa7\x89\xe1\xa7\x90\xe1\xa7\x9a'+
    b'\xe1\xa8\x80\xe1\xa8\x9b\xe1\xa8\xa0\xe1\xa9\x9e\xe1\xa9\xa0\xe1\xa9\xbc\xe1\xa9'+
    b'\xbf\xe1\xaa\x89\xe1\xaa\x90\xe1\xaa\x99\xe1\xaa\xb0\xe1\xaa\xbd\xe1\xac\x80\xe1'+
    b'\xad\x8b\xe1\xad\x90\xe1\xad\x99\xe1\xad\xab\xe1\xad\xb3\xe1\xae\x80\xe1\xaf\xb3'+
    b'\xe1\xb0\x80\xe1\xb0\xb7\xe1\xb1\x80\xe1\xb1\x89\xe1\xb1\x8d\xe1\xb1\xbd\xe1\xb2'+
    b'\x80\xe1\xb2\x88\xe1\xb2\x90\xe1\xb2\xba\xe1\xb2\xbd\xe1\xb2\xbf\xe1\xb3\x90\xe1'+
    b'\xb3\x92\xe1\xb3\x94\xe1\xb3\xb9\xe1\xb4\x80\xe1\xb7\xb9\xe1\xb7\xbb\xe1\xbc\x95'+
    b'\xe1\xbc\x98\xe1\xbc\x9d\xe1\xbc\xa0\xe1\xbd\x85\xe1\xbd\x88\xe1\xbd\x8d\xe1\xbd'+
    b'\x90\xe1\xbd\x97\xe1\xbd\x9f\xe1\xbd\xbd\xe1\xbe\x80\xe1\xbe\xb4\xe1\xbe\xb6\xe1'+
    b'\xbe\xbc\xe1\xbf\x82\xe1\xbf\x84\xe1\xbf\x86\xe1\xbf\x8c\xe1\xbf\x90\xe1\xbf\x93'+
    b'\xe1\xbf\x96\xe1\xbf\x9b\xe1\xbf\xa0\xe1\xbf\xac\xe1\xbf\xb2\xe1\xbf\xb4\xe1\xbf'+
    b'\xb6\xe1\xbf\xbc\xe2\x80\xbf\xe2\x81\x80\xe2\x82\x90\xe2\x82\x9c\xe2\x83\x90\xe2'+
    b'\x83\x9c\xe2\x83\xa5\xe2\x83\xb0\xe2\x84\x8a\xe2\x84\x93\xe2\x84\x98\xe2\x84\x9d'+
    b'\xe2\x84\xaa\xe2\x84\xb9\xe2\x84\xbc\xe2\x84\xbf\xe2\x85\x85\xe2\x85\x89\xe2\x85'+
    b'\xa0\xe2\x86\x88\xe2\xb0\x80\xe2\xb0\xae\xe2\xb0\xb0\xe2\xb1\x9e\xe2\xb1\xa0\xe2'+
    b'\xb3\xa4\xe2\xb3\xab\xe2\xb3\xb3\xe2\xb4\x80\xe2\xb4\xa5\xe2\xb4\xb0\xe2\xb5\xa7'+
    b'\xe2\xb5\xbf\xe2\xb6\x96\xe2\xb6\xa0\xe2\xb6\xa6\xe2\xb6\xa8\xe2\xb6\xae\xe2\xb6'+
    b'\xb0\xe2\xb6\xb6\xe2\xb6\xb8\xe2\xb6\xbe\xe2\xb7\x80\xe2\xb7\x86\xe2\xb7\x88\xe2'+
    b'\xb7\x8e\xe2\xb7\x90\xe2\xb7\x96\xe2\xb7\x98\xe2\xb7\x9e\xe2\xb7\xa0\xe2\xb7\xbf'+
    b'\xe3\x80\x85\xe3\x80\x87\xe3\x80\xa1\xe3\x80\xaf\xe3\x80\xb1\xe3\x80\xb5\xe3\x80'+
    b'\xb8\xe3\x80\xbc\xe3\x81\x81\xe3\x82\x96\xe3\x82\x99\xe3\x82\x9a\xe3\x82\x9d\xe3'+
    b'\x82\x9f\xe3\x82\xa1\xe3\x83\xba\xe3\x83\xbc\xe3\x83\xbf\xe3\x84\x85\xe3\x84\xaf'+
    b'\xe3\x84\xb1\xe3\x86\x8e\xe3\x86\xa0\xe3\x86\xba\xe3\x87\xb0\xe3\x87\xbf\xe3\x90'+
    b'\x80\xe4\xb6\xb5\xe4\xb8\x80\xe9\xbf\xaf\xea\x80\x80\xea\x92\x8c\xea\x93\x90\xea'+
    b'\x93\xbd\xea\x94\x80\xea\x98\x8c\xea\x98\x90\xea\x98\xab\xea\x99\x80\xea\x99\xaf'+
    b'\xea\x99\xb4\xea\x99\xbd\xea\x99\xbf\xea\x9b\xb1\xea\x9c\x97\xea\x9c\x9f\xea\x9c'+
    b'\xa2\xea\x9e\x88\xea\x9e\x8b\xea\x9e\xb9\xea\x9f\xb7\xea\xa0\xa7\xea\xa1\x80\xea'+
    b'\xa1\xb3\xea\xa2\x80\xea\xa3\x85\xea\xa3\x90\xea\xa3\x99\xea\xa3\xa0\xea\xa3\xb7'+
    b'\xea\xa3\xbd\xea\xa4\xad\xea\xa4\xb0\xea\xa5\x93\xea\xa5\xa0\xea\xa5\xbc\xea\xa6'+
    b'\x80\xea\xa7\x80\xea\xa7\x8f\xea\xa7\x99\xea\xa7\xa0\xea\xa7\xbe\xea\xa8\x80\xea'+
    b'\xa8\xb6\xea\xa9\x80\xea\xa9\x8d\xea\xa9\x90\xea\xa9\x99\xea\xa9\xa0\xea\xa9\xb6'+
    b'\xea\xa9\xba\xea\xab\x82\xea\xab\x9b\xea\xab\x9d\xea\xab\xa0\xea\xab\xaf\xea\xab'+
    b'\xb2\xea\xab\xb6\xea\xac\x81\xea\xac\x86\xea\xac\x89\xea\xac\x8e\xea\xac\x91\xea'+
    b'\xac\x96\xea\xac\xa0\xea\xac\xa6\xea\xac\xa8\xea\xac\xae\xea\xac\xb0\xea\xad\x9a'+
    b'\xea\xad\x9c\xea\xad\xa5\xea\xad\xb0\xea\xaf\xaa\xea\xaf\xac\xea\xaf\xad\xea\xaf'+
    b'\xb0\xea\xaf\xb9\xea\xb0\x80\xed\x9e\xa3\xed\x9e\xb0\xed\x9f\x86\xed\x9f\x8b\xed'+
    b'\x9f\xbb\xef\xa4\x80\xef\xa9\xad\xef\xa9\xb0\xef\xab\x99\xef\xac\x80\xef\xac\x86'+
    b'\xef\xac\x93\xef\xac\x97\xef\xac\x9d\xef\xac\xa8\xef\xac\xaa\xef\xac\xb6\xef\xac'+
    b'\xb8\xef\xac\xbc\xef\xad\x80\xef\xad\x81\xef\xad\x83\xef\xad\x84\xef\xad\x86\xef'+
    b'\xae\xb1\xef\xaf\x93\xef\xb1\x9d\xef\xb1\xa4\xef\xb4\xbd\xef\xb5\x90\xef\xb6\x8f'+
    b'\xef\xb6\x92\xef\xb7\x87\xef\xb7\xb0\xef\xb7\xb9\xef\xb8\x80\xef\xb8\x8f\xef\xb8'+
    b'\xa0\xef\xb8\xaf\xef\xb8\xb3\xef\xb8\xb4\xef\xb9\x8d\xef\xb9\x8f\xef\xb9\xbf\xef'+
    b'\xbb\xbc\xef\xbc\x90\xef\xbc\x99\xef\xbc\xa1\xef\xbc\xba\xef\xbd\x81\xef\xbd\x9a'+
    b'\xef\xbd\xa6\xef\xbe\xbe\xef\xbf\x82\xef\xbf\x87\xef\xbf\x8a\xef\xbf\x8f\xef\xbf'+
    b'\x92\xef\xbf\x97\xef\xbf\x9a\xef\xbf\x9c\xf0\x90\x80\x80\xf0\x90\x80\x8b\xf0\x90'+
    b'\x80\x8d\xf0\x90\x80\xa6\xf0\x90\x80\xa8\xf0\x90\x80\xba\xf0\x90\x80\xbc\xf0\x90'+
    b'\x80\xbd\xf0\x90\x80\xbf\xf0\x90\x81\x8d\xf0\x90\x81\x90\xf0\x90\x81\x9d\xf0\x90'+
    b'\x82\x80\xf0\x90\x83\xba\xf0\x90\x85\x80\xf0\x90\x85\xb4\xf0\x90\x8a\x80\xf0\x90'+
    b'\x8a\x9c\xf0\x90\x8a\xa0\xf0\x90\x8b\x90\xf0\x90\x8c\x80\xf0\x90\x8c\x9f\xf0\x90'+
    b'\x8c\xad\xf0\x90\x8d\x8a\xf0\x90\x8d\x90\xf0\x90\x8d\xba\xf0\x90\x8e\x80\xf0\x90'+
    b'\x8e\x9d\xf0\x90\x8e\xa0\xf0\x90\x8f\x83\xf0\x90\x8f\x88\xf0\x90\x8f\x8f\xf0\x90'+
    b'\x8f\x91\xf0\x90\x8f\x95\xf0\x90\x90\x80\xf0\x90\x92\x9d\xf0\x90\x92\xa0\xf0\x90'+
    b'\x92\xa9\xf0\x90\x92\xb0\xf0\x90\x93\x93\xf0\x90\x93\x98\xf0\x90\x93\xbb\xf0\x90'+
    b'\x94\x80\xf0\x90\x94\xa7\xf0\x90\x94\xb0\xf0\x90\x95\xa3\xf0\x90\x98\x80\xf0\x90'+
    b'\x9c\xb6\xf0\x90\x9d\x80\xf0\x90\x9d\x95\xf0\x90\x9d\xa0\xf0\x90\x9d\xa7\xf0\x90'+
    b'\xa0\x80\xf0\x90\xa0\x85\xf0\x90\xa0\x8a\xf0\x90\xa0\xb5\xf0\x90\xa0\xb7\xf0\x90'+
    b'\xa0\xb8\xf0\x90\xa0\xbf\xf0\x90\xa1\x95\xf0\x90\xa1\xa0\xf0\x90\xa1\xb6\xf0\x90'+
    b'\xa2\x80\xf0\x90\xa2\x9e\xf0\x90\xa3\xa0\xf0\x90\xa3\xb2\xf0\x90\xa3\xb4\xf0\x90'+
    b'\xa3\xb5\xf0\x90\xa4\x80\xf0\x90\xa4\x95\xf0\x90\xa4\xa0\xf0\x90\xa4\xb9\xf0\x90'+
    b'\xa6\x80\xf0\x90\xa6\xb7\xf0\x90\xa6\xbe\xf0\x90\xa6\xbf\xf0\x90\xa8\x80\xf0\x90'+
    b'\xa8\x83\xf0\x90\xa8\x85\xf0\x90\xa8\x86\xf0\x90\xa8\x8c\xf0\x90\xa8\x93\xf0\x90'+
    b'\xa8\x95\xf0\x90\xa8\x97\xf0\x90\xa8\x99\xf0\x90\xa8\xb5\xf0\x90\xa8\xb8\xf0\x90'+
    b'\xa8\xba\xf0\x90\xa9\xa0\xf0\x90\xa9\xbc\xf0\x90\xaa\x80\xf0\x90\xaa\x9c\xf0\x90'+
    b'\xab\x80\xf0\x90\xab\x87\xf0\x90\xab\x89\xf0\x90\xab\xa6\xf0\x90\xac\x80\xf0\x90'+
    b'\xac\xb5\xf0\x90\xad\x80\xf0\x90\xad\x95\xf0\x90\xad\xa0\xf0\x90\xad\xb2\xf0\x90'+
    b'\xae\x80\xf0\x90\xae\x91\xf0\x90\xb0\x80\xf0\x90\xb1\x88\xf0\x90\xb2\x80\xf0\x90'+
    b'\xb2\xb2\xf0\x90\xb3\x80\xf0\x90\xb3\xb2\xf0\x90\xb4\x80\xf0\x90\xb4\xa7\xf0\x90'+
    b'\xb4\xb0\xf0\x90\xb4\xb9\xf0\x90\xbc\x80\xf0\x90\xbc\x9c\xf0\x90\xbc\xb0\xf0\x90'+
    b'\xbd\x90\xf0\x91\x80\x80\xf0\x91\x81\x86\xf0\x91\x81\xa6\xf0\x91\x81\xaf\xf0\x91'+
    b'\x81\xbf\xf0\x91\x82\xba\xf0\x91\x83\x90\xf0\x91\x83\xa8\xf0\x91\x83\xb0\xf0\x91'+
    b'\x83\xb9\xf0\x91\x84\x80\xf0\x91\x84\xb4\xf0\x91\x84\xb6\xf0\x91\x84\xbf\xf0\x91'+
    b'\x85\x84\xf0\x91\x85\x86\xf0\x91\x85\x90\xf0\x91\x85\xb3\xf0\x91\x86\x80\xf0\x91'+
    b'\x87\x84\xf0\x91\x87\x89\xf0\x91\x87\x8c\xf0\x91\x87\x90\xf0\x91\x87\x9a\xf0\x91'+
    b'\x88\x80\xf0\x91\x88\x91\xf0\x91\x88\x93\xf0\x91\x88\xb7\xf0\x91\x8a\x80\xf0\x91'+
    b'\x8a\x86\xf0\x91\x8a\x8a\xf0\x91\x8a\x8d\xf0\x91\x8a\x8f\xf0\x91\x8a\x9d\xf0\x91'+
    b'\x8a\x9f\xf0\x91\x8a\xa8\xf0\x91\x8a\xb0\xf0\x91\x8b\xaa\xf0\x91\x8b\xb0\xf0\x91'+
    b'\x8b\xb9\xf0\x91\x8c\x80\xf0\x91\x8c\x83\xf0\x91\x8c\x85\xf0\x91\x8c\x8c\xf0\x91'+
    b'\x8c\x8f\xf0\x91\x8c\x90\xf0\x91\x8c\x93\xf0\x91\x8c\xa8\xf0\x91\x8c\xaa\xf0\x91'+
    b'\x8c\xb0\xf0\x91\x8c\xb2\xf0\x91\x8c\xb3\xf0\x91\x8c\xb5\xf0\x91\x8c\xb9\xf0\x91'+
    b'\x8c\xbb\xf0\x91\x8d\x84\xf0\x91\x8d\x87\xf0\x91\x8d\x88\xf0\x91\x8d\x8b\xf0\x91'+
    b'\x8d\x8d\xf0\x91\x8d\x9d\xf0\x91\x8d\xa3\xf0\x91\x8d\xa6\xf0\x91\x8d\xac\xf0\x91'+
    b'\x8d\xb0\xf0\x91\x8d\xb4\xf0\x91\x90\x80\xf0\x91\x91\x8a\xf0\x91\x91\x90\xf0\x91'+
    b'\x91\x99\xf0\x91\x92\x80\xf0\x91\x93\x85\xf0\x91\x93\x90\xf0\x91\x93\x99\xf0\x91'+
    b'\x96\x80\xf0\x91\x96\xb5\xf0\x91\x96\xb8\xf0\x91\x97\x80\xf0\x91\x97\x98\xf0\x91'+
    b'\x97\x9d\xf0\x91\x98\x80\xf0\x91\x99\x80\xf0\x91\x99\x90\xf0\x91\x99\x99\xf0\x91'+
    b'\x9a\x80\xf0\x91\x9a\xb7\xf0\x91\x9b\x80\xf0\x91\x9b\x89\xf0\x91\x9c\x80\xf0\x91'+
    b'\x9c\x9a\xf0\x91\x9c\x9d\xf0\x91\x9c\xab\xf0\x91\x9c\xb0\xf0\x91\x9c\xb9\xf0\x91'+
    b'\xa0\x80\xf0\x91\xa0\xba\xf0\x91\xa2\xa0\xf0\x91\xa3\xa9\xf0\x91\xa8\x80\xf0\x91'+
    b'\xa8\xbe\xf0\x91\xa9\x90\xf0\x91\xaa\x83\xf0\x91\xaa\x86\xf0\x91\xaa\x99\xf0\x91'+
    b'\xab\x80\xf0\x91\xab\xb8\xf0\x91\xb0\x80\xf0\x91\xb0\x88\xf0\x91\xb0\x8a\xf0\x91'+
    b'\xb0\xb6\xf0\x91\xb0\xb8\xf0\x91\xb1\x80\xf0\x91\xb1\x90\xf0\x91\xb1\x99\xf0\x91'+
    b'\xb1\xb2\xf0\x91\xb2\x8f\xf0\x91\xb2\x92\xf0\x91\xb2\xa7\xf0\x91\xb2\xa9\xf0\x91'+
    b'\xb2\xb6\xf0\x91\xb4\x80\xf0\x91\xb4\x86\xf0\x91\xb4\x88\xf0\x91\xb4\x89\xf0\x91'+
    b'\xb4\x8b\xf0\x91\xb4\xb6\xf0\x91\xb4\xbc\xf0\x91\xb4\xbd\xf0\x91\xb4\xbf\xf0\x91'+
    b'\xb5\x87\xf0\x91\xb5\x90\xf0\x91\xb5\x99\xf0\x91\xb5\xa0\xf0\x91\xb5\xa5\xf0\x91'+
    b'\xb5\xa7\xf0\x91\xb5\xa8\xf0\x91\xb5\xaa\xf0\x91\xb6\x8e\xf0\x91\xb6\x90\xf0\x91'+
    b'\xb6\x91\xf0\x91\xb6\x93\xf0\x91\xb6\x98\xf0\x91\xb6\xa0\xf0\x91\xb6\xa9\xf0\x91'+
    b'\xbb\xa0\xf0\x91\xbb\xb6\xf0\x92\x80\x80\xf0\x92\x8e\x99\xf0\x92\x90\x80\xf0\x92'+
    b'\x91\xae\xf0\x92\x92\x80\xf0\x92\x95\x83\xf0\x93\x80\x80\xf0\x93\x90\xae\xf0\x94'+
    b'\x90\x80\xf0\x94\x99\x86\xf0\x96\xa0\x80\xf0\x96\xa8\xb8\xf0\x96\xa9\x80\xf0\x96'+
    b'\xa9\x9e\xf0\x96\xa9\xa0\xf0\x96\xa9\xa9\xf0\x96\xab\x90\xf0\x96\xab\xad\xf0\x96'+
    b'\xab\xb0\xf0\x96\xab\xb4\xf0\x96\xac\x80\xf0\x96\xac\xb6\xf0\x96\xad\x80\xf0\x96'+
    b'\xad\x83\xf0\x96\xad\x90\xf0\x96\xad\x99\xf0\x96\xad\xa3\xf0\x96\xad\xb7\xf0\x96'+
    b'\xad\xbd\xf0\x96\xae\x8f\xf0\x96\xb9\x80\xf0\x96\xb9\xbf\xf0\x96\xbc\x80\xf0\x96'+
    b'\xbd\x84\xf0\x96\xbd\x90\xf0\x96\xbd\xbe\xf0\x96\xbe\x8f\xf0\x96\xbe\x9f\xf0\x96'+
    b'\xbf\xa0\xf0\x96\xbf\xa1\xf0\x97\x80\x80\xf0\x98\x9f\xb1\xf0\x98\xa0\x80\xf0\x98'+
    b'\xab\xb2\xf0\x9b\x80\x80\xf0\x9b\x84\x9e\xf0\x9b\x85\xb0\xf0\x9b\x8b\xbb\xf0\x9b'+
    b'\xb0\x80\xf0\x9b\xb1\xaa\xf0\x9b\xb1\xb0\xf0\x9b\xb1\xbc\xf0\x9b\xb2\x80\xf0\x9b'+
    b'\xb2\x88\xf0\x9b\xb2\x90\xf0\x9b\xb2\x99\xf0\x9b\xb2\x9d\xf0\x9b\xb2\x9e\xf0\x9d'+
    b'\x85\xa5\xf0\x9d\x85\xa9\xf0\x9d\x85\xad\xf0\x9d\x85\xb2\xf0\x9d\x85\xbb\xf0\x9d'+
    b'\x86\x82\xf0\x9d\x86\x85\xf0\x9d\x86\x8b\xf0\x9d\x86\xaa\xf0\x9d\x86\xad\xf0\x9d'+
    b'\x89\x82\xf0\x9d\x89\x84\xf0\x9d\x90\x80\xf0\x9d\x91\x94\xf0\x9d\x91\x96\xf0\x9d'+
    b'\x92\x9c\xf0\x9d\x92\x9e\xf0\x9d\x92\x9f\xf0\x9d\x92\xa5\xf0\x9d\x92\xa6\xf0\x9d'+
    b'\x92\xa9\xf0\x9d\x92\xac\xf0\x9d\x92\xae\xf0\x9d\x92\xb9\xf0\x9d\x92\xbd\xf0\x9d'+
    b'\x93\x83\xf0\x9d\x93\x85\xf0\x9d\x94\x85\xf0\x9d\x94\x87\xf0\x9d\x94\x8a\xf0\x9d'+
    b'\x94\x8d\xf0\x9d\x94\x94\xf0\x9d\x94\x96\xf0\x9d\x94\x9c\xf0\x9d\x94\x9e\xf0\x9d'+
    b'\x94\xb9\xf0\x9d\x94\xbb\xf0\x9d\x94\xbe\xf0\x9d\x95\x80\xf0\x9d\x95\x84\xf0\x9d'+
    b'\x95\x8a\xf0\x9d\x95\x90\xf0\x9d\x95\x92\xf0\x9d\x9a\xa5\xf0\x9d\x9a\xa8\xf0\x9d'+
    b'\x9b\x80\xf0\x9d\x9b\x82\xf0\x9d\x9b\x9a\xf0\x9d\x9b\x9c\xf0\x9d\x9b\xba\xf0\x9d'+
    b'\x9b\xbc\xf0\x9d\x9c\x94\xf0\x9d\x9c\x96\xf0\x9d\x9c\xb4\xf0\x9d\x9c\xb6\xf0\x9d'+
    b'\x9d\x8e\xf0\x9d\x9d\x90\xf0\x9d\x9d\xae\xf0\x9d\x9d\xb0\xf0\x9d\x9e\x88\xf0\x9d'+
    b'\x9e\x8a\xf0\x9d\x9e\xa8\xf0\x9d\x9e\xaa\xf0\x9d\x9f\x82\xf0\x9d\x9f\x84\xf0\x9d'+
    b'\x9f\x8b\xf0\x9d\x9f\x8e\xf0\x9d\x9f\xbf\xf0\x9d\xa8\x80\xf0\x9d\xa8\xb6\xf0\x9d'+
    b'\xa8\xbb\xf0\x9d\xa9\xac\xf0\x9d\xaa\x9b\xf0\x9d\xaa\x9f\xf0\x9d\xaa\xa1\xf0\x9d'+
    b'\xaa\xaf\xf0\x9e\x80\x80\xf0\x9e\x80\x86\xf0\x9e\x80\x88\xf0\x9e\x80\x98\xf0\x9e'+
    b'\x80\x9b\xf0\x9e\x80\xa1\xf0\x9e\x80\xa3\xf0\x9e\x80\xa4\xf0\x9e\x80\xa6\xf0\x9e'+
    b'\x80\xaa\xf0\x9e\xa0\x80\xf0\x9e\xa3\x84\xf0\x9e\xa3\x90\xf0\x9e\xa3\x96\xf0\x9e'+
    b'\xa4\x80\xf0\x9e\xa5\x8a\xf0\x9e\xa5\x90\xf0\x9e\xa5\x99\xf0\x9e\xb8\x80\xf0\x9e'+
    b'\xb8\x83\xf0\x9e\xb8\x85\xf0\x9e\xb8\x9f\xf0\x9e\xb8\xa1\xf0\x9e\xb8\xa2\xf0\x9e'+
    b'\xb8\xa9\xf0\x9e\xb8\xb2\xf0\x9e\xb8\xb4\xf0\x9e\xb8\xb7\xf0\x9e\xb9\x8d\xf0\x9e'+
    b'\xb9\x8f\xf0\x9e\xb9\x91\xf0\x9e\xb9\x92\xf0\x9e\xb9\xa1\xf0\x9e\xb9\xa2\xf0\x9e'+
    b'\xb9\xa7\xf0\x9e\xb9\xaa\xf0\x9e\xb9\xac\xf0\x9e\xb9\xb2\xf0\x9e\xb9\xb4\xf0\x9e'+
    b'\xb9\xb7\xf0\x9e\xb9\xb9\xf0\x9e\xb9\xbc\xf0\x9e\xba\x80\xf0\x9e\xba\x89\xf0\x9e'+
    b'\xba\x8b\xf0\x9e\xba\x9b\xf0\x9e\xba\xa1\xf0\x9e\xba\xa3\xf0\x9e\xba\xa5\xf0\x9e'+
    b'\xba\xa9\xf0\x9e\xba\xab\xf0\x9e\xba\xbb\xf0\xa0\x80\x80\xf0\xaa\x9b\x96\xf0\xaa'+
    b'\x9c\x80\xf0\xab\x9c\xb4\xf0\xab\x9d\x80\xf0\xab\xa0\x9d\xf0\xab\xa0\xa0\xf0\xac'+
    b'\xba\xa1\xf0\xac\xba\xb0\xf0\xae\xaf\xa0\xf0\xaf\xa0\x80\xf0\xaf\xa8\x9d').decode('utf-8')))

    def underscore_digits(d):
        return Rep1(d) + Rep(Str("_") + Rep1(d))

    def prefixed_digits(prefix, digits):
        return prefix + Opt(Str("_")) + underscore_digits(digits)

    decimal = underscore_digits(digit)
    dot = Str(".")
    exponent = Any("Ee") + Opt(Any("+-")) + decimal
    decimal_fract = (decimal + dot + Opt(decimal)) | (dot + decimal)

    #name = letter + Rep(letter | digit)
    name = unicode_start_character + Rep(unicode_continuation_character)
    intconst = (prefixed_digits(nonzero_digit, digit) |  # decimal literals with underscores must not start with '0'
                (Str("0") + (prefixed_digits(Any("Xx"), hexdigit) |
                             prefixed_digits(Any("Oo"), octdigit) |
                             prefixed_digits(Any("Bb"), bindigit) )) |
                underscore_digits(Str('0'))  # 0_0_0_0... is allowed as a decimal literal
                | Rep1(digit)  # FIXME: remove these Py2 style decimal/octal literals (PY_VERSION_HEX < 3)
                )
    intsuffix = (Opt(Any("Uu")) + Opt(Any("Ll")) + Opt(Any("Ll"))) | (Opt(Any("Ll")) + Opt(Any("Ll")) + Opt(Any("Uu")))
    intliteral = intconst + intsuffix
    fltconst = (decimal_fract + Opt(exponent)) | (decimal + exponent)
    imagconst = (intconst | fltconst) + Any("jJ")

    # invalid combinations of prefixes are caught in p_string_literal
    beginstring = Opt(Rep(Any(string_prefixes + raw_prefixes)) |
                      Any(char_prefixes)
                      ) + (Str("'") | Str('"') | Str("'''") | Str('"""'))
    two_oct = octdigit + octdigit
    three_oct = octdigit + octdigit + octdigit
    two_hex = hexdigit + hexdigit
    four_hex = two_hex + two_hex
    escapeseq = Str("\\") + (two_oct | three_oct |
                             Str('N{') + Rep(AnyBut('}')) + Str('}') |
                             Str('u') + four_hex | Str('x') + two_hex |
                             Str('U') + four_hex + four_hex | AnyChar)

    bra = Any("([{")
    ket = Any(")]}")
    punct = Any(":,;+-*/|&<>=.%`~^?!@")
    diphthong = Str("==", "<>", "!=", "<=", ">=", "<<", ">>", "**", "//",
                    "+=", "-=", "*=", "/=", "%=", "|=", "^=", "&=",
                    "<<=", ">>=", "**=", "//=", "->", "@=")
    spaces = Rep1(Any(" \t\f"))
    escaped_newline = Str("\\\n")
    lineterm = Eol + Opt(Str("\n"))

    comment = Str("#") + Rep(AnyBut("\n"))

    return Lexicon([
        (name, IDENT),
        (intliteral, Method('strip_underscores', symbol='INT')),
        (fltconst, Method('strip_underscores', symbol='FLOAT')),
        (imagconst, Method('strip_underscores', symbol='IMAG')),
        (punct | diphthong, TEXT),

        (bra, Method('open_bracket_action')),
        (ket, Method('close_bracket_action')),
        (lineterm, Method('newline_action')),

        (beginstring, Method('begin_string_action')),

        (comment, IGNORE),
        (spaces, IGNORE),
        (escaped_newline, IGNORE),

        State('INDENT', [
            (comment + lineterm, Method('commentline')),
            (Opt(spaces) + Opt(comment) + lineterm, IGNORE),
            (indentation, Method('indentation_action')),
            (Eof, Method('eof_action'))
        ]),

        State('SQ_STRING', [
            (escapeseq, 'ESCAPE'),
            (Rep1(AnyBut("'\"\n\\")), 'CHARS'),
            (Str('"'), 'CHARS'),
            (Str("\n"), Method('unclosed_string_action')),
            (Str("'"), Method('end_string_action')),
            (Eof, 'EOF')
        ]),

        State('DQ_STRING', [
            (escapeseq, 'ESCAPE'),
            (Rep1(AnyBut('"\n\\')), 'CHARS'),
            (Str("'"), 'CHARS'),
            (Str("\n"), Method('unclosed_string_action')),
            (Str('"'), Method('end_string_action')),
            (Eof, 'EOF')
        ]),

        State('TSQ_STRING', [
            (escapeseq, 'ESCAPE'),
            (Rep1(AnyBut("'\"\n\\")), 'CHARS'),
            (Any("'\""), 'CHARS'),
            (Str("\n"), 'NEWLINE'),
            (Str("'''"), Method('end_string_action')),
            (Eof, 'EOF')
        ]),

        State('TDQ_STRING', [
            (escapeseq, 'ESCAPE'),
            (Rep1(AnyBut('"\'\n\\')), 'CHARS'),
            (Any("'\""), 'CHARS'),
            (Str("\n"), 'NEWLINE'),
            (Str('"""'), Method('end_string_action')),
            (Eof, 'EOF')
        ]),

        (Eof, Method('eof_action'))
        ],

        # FIXME: Plex 1.9 needs different args here from Plex 1.1.4
        #debug_flags = scanner_debug_flags,
        #debug_file = scanner_dump_file
        )

# Unicode character set explanation:
#  The easiest way to generate an appropriate character set is just to use the str.isidentifier method
#  This is only valid on Python 3; however, since these functions are just to illustrate how the unicode
#  plex strings were generated (and not actually used) compatibility doesn't matter
def _get_start_chrs_num():
    import sys
    return [ i for i in range(sys.maxunicode) if str.isidentifier(chr(i)) ]

def _get_cont_chrs_num():
    import sys
    return [ i for i in range(sys.maxunicode) if str.isidentifier('a'+chr(i)) ]
# An alternative approach for getting character sets is at https://stackoverflow.com/a/49332214/4657412

# The large lists of character digits are then converted to ranges with:
def _to_ranges(char_num_list):
    char_num_list = sorted(char_num_list)
    first_good_val = char_num_list[0]

    out = []
    for n in range(1,len(char_num_list)):
        if char_num_list[n]-1 != char_num_list[n-1]:
            # discontinuous
            if first_good_val==char_num_list[n-1]:
                out.append(char_num_list[n-1])
            else:
                out.append(range(first_good_val,char_num_list[n-1]+1))
            first_good_val = char_num_list[n]
    return out
# and to the Plex commands copied into the code with
def _ranges_to_plex(ranges):
    single_chars = []
    plex_ranges = []
    for x in ranges:
        try:
            start = x.start
        except AttributeError:
            single_chars.append(chr(x))
        else:
            stop = x.stop
            plex_ranges.append((chr(start)+chr(stop-1)))
    # formatting
    single_chars = _make_split_strings(single_chars)
    plex_ranges = _make_split_strings(plex_ranges)
    return "Any(({0}).decode('utf-8')) | Range(({1}).decode('utf-8'))".format(
        single_chars,plex_ranges)

def _make_split_strings(chars,splitby=20):
    chars = "".join(chars).encode('utf-8')
    out = []
    for i in range(0,len(chars),splitby):
        out.append(repr(chars[i:i+splitby]))
    return "+\n".join(out)

def print_start_expression():
    exp = _ranges_to_plex(_to_ranges(_get_start_chrs_num()))
    for line in exp.splitlines():
        print(line)

def print_cont_expression():
    exp = _ranges_to_plex(_to_ranges(_get_cont_chrs_num()))
    for line in exp.splitlines():
        print(line)
